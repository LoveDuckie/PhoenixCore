<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhRenderSystem Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhRenderSystem Class Reference</h1><!-- doxytag: class="phoenix::PhRenderSystem" -->The render system.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhRenderSystem_8h-source.htm">svn/0.3/libPhoenixGL/PhRenderSystem.h</a>&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhRenderSystem-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>PhGlyph</b></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cad9dcee0d9957d558ffb677204489c0"></a><!-- doxytag: member="phoenix::PhRenderSystem::PhRenderSystem" ref="cad9dcee0d9957d558ffb677204489c0" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#cad9dcee0d9957d558ffb677204489c0">PhRenderSystem</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c36124fa2f4315fb6b85c24867fd5ea9"></a><!-- doxytag: member="phoenix::PhRenderSystem::~PhRenderSystem" ref="c36124fa2f4315fb6b85c24867fd5ea9" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#c36124fa2f4315fb6b85c24867fd5ea9">~PhRenderSystem</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destruct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#75a3cdec5e5e8f0ce7890592fd831a32">setWindowCaption</a> (const std::string &amp;str)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set window caption.  <a href="#75a3cdec5e5e8f0ce7890592fd831a32"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#02af637bc2b139058e769afb2878e291">run</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Run.  <a href="#02af637bc2b139058e769afb2878e291"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#a7fc301da2eaba14ce03731aedf18e09">getFPS</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get frames per second.  <a href="#a7fc301da2eaba14ce03731aedf18e09"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#6597e29149681935a9ed05db2a10da8d">getTicks</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get ticks.  <a href="#6597e29149681935a9ed05db2a10da8d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#673f8847b0cc359769811cff266950ad">initSystem</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;sc=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(640, 480), const bool &amp;fs=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Init system.  <a href="#673f8847b0cc359769811cff266950ad"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#ee24592b4ceb2f31bc26dd6069ba35d4">getScreenSize</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get screen size.  <a href="#ee24592b4ceb2f31bc26dd6069ba35d4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#d5f821c8623c12b272c99a0cb64cd260">loadTexture</a> (const std::string &amp;filename, const bool &amp;linear=true)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load texture.  <a href="#d5f821c8623c12b272c99a0cb64cd260"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#39aa04d2ebf11f86587c361799ee7500">drawIndexedTriangleList</a> (GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;tricount)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw indexed trangle list.  <a href="#39aa04d2ebf11f86587c361799ee7500"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#97b5970c063466bdaff82682e9e22c52">drawIndexedTriangleFan</a> (GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;vertcount)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw indexed trangle fan.  <a href="#97b5970c063466bdaff82682e9e22c52"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#ade55bf5fb4fc6a407d0f791d7936ab0">drawIndexedLine</a> (GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;vertcount)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw indexed line.  <a href="#ade55bf5fb4fc6a407d0f791d7936ab0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#0c65ffd04a4b6900b41d589fbd141662">drawLine</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;v1=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0, 0), const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;v2=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw line.  <a href="#0c65ffd04a4b6900b41d589fbd141662"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#8c5fc257f068a74f18e7f85ba5679ef7">drawRay</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;origin=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0, 0), const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;ray=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw ray.  <a href="#8c5fc257f068a74f18e7f85ba5679ef7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#dc306f2312c3474d5bb4c58411ffd390">drawRectangle</a> (const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;r=<a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a>(0, 0, 0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255), const PhColor &amp;c=PhColor(255, 255, 255), const PhColor &amp;d=PhColor(255, 255, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw rectangle.  <a href="#dc306f2312c3474d5bb4c58411ffd390"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#18a786d2b7f34eea267f99f30764a97d">drawPolygon</a> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;P, const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draws a polygon.  <a href="#18a786d2b7f34eea267f99f30764a97d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#516d686ff6b4b74cf15f5c7b525edb09">drawTexturedPolygon</a> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;P, <a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *texture, const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const bool &amp;eyespace=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draws a textured polygon.  <a href="#516d686ff6b4b74cf15f5c7b525edb09"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#279947709b3a7e029f997fd4044a5d89">drawTexture</a> (<a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *source, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;pos, const float &amp;depth=0.0f, const float &amp;rot=0.0f, const PhVector2d &amp;scale=PhVector2d(1.0f, 1.0f), const PhColor &amp;color=PhColor(255, 255, 255), const bool &amp;hflip=false, const bool &amp;vflip=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw texture.  <a href="#279947709b3a7e029f997fd4044a5d89"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#24b4a578667cb1f29d2ad895ccde124d">drawTexturePart</a> (<a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *source, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;pos, const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;rect, const float &amp;depth=0.0f, const float &amp;rot=0.0f, const PhVector2d &amp;scale=PhVector2d(1.0f, 1.0f), const PhColor &amp;color=PhColor(255, 255, 255), const bool &amp;hflip=false, const bool &amp;vflip=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw texture part.  <a href="#24b4a578667cb1f29d2ad895ccde124d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#cda0ab0c39cc128feedecde13e59e59e">drawText</a> (const std::string &amp;text, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;pos, const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;color=<a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255, 255, 255), const float &amp;depth=0.0f)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw text.  <a href="#cda0ab0c39cc128feedecde13e59e59e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#2a6f05d94d2e11bfda8a34802965a13d">setFont</a> (<a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *t)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set font.  <a href="#2a6f05d94d2e11bfda8a34802965a13d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#802c76f7b2ccd2c9e5d29ee980bf7fbe">getFont</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get font.  <a href="#802c76f7b2ccd2c9e5d29ee980bf7fbe"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhEventHandler.htm">PhEventHandler</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#ddb2013389ce84adfb0a1f3978779610">getEventHandler</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get event handler.  <a href="#ddb2013389ce84adfb0a1f3978779610"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhTextureManager.htm">PhTextureManager</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#4078d53b8dc23fed10a88620b04fa1a6">getTextureManager</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get texture manager.  <a href="#4078d53b8dc23fed10a88620b04fa1a6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhLogManager.htm">PhLogManager</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#640a96caf3bfdd05735cf653f4e629bd">getLogManager</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get log manager.  <a href="#640a96caf3bfdd05735cf653f4e629bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhVertexLightSystem.htm">PhVertexLightSystem</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#896168af706a0fffd82a6cb92939a82b">getVertexLightSystem</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get vertex light system.  <a href="#896168af706a0fffd82a6cb92939a82b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#68bc6d02c3cd02645d9a5cb8602ec9b9">setVertexLightSystem</a> (<a class="el" href="classphoenix_1_1PhVertexLightSystem.htm">PhVertexLightSystem</a> *v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set vertex light system.  <a href="#68bc6d02c3cd02645d9a5cb8602ec9b9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#ce6007108e8771dbe0ec8a51c9d0ece2">setBlendMode</a> (const GLenum &amp;src, const GLenum &amp;dst)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set blend mode.  <a href="#ce6007108e8771dbe0ec8a51c9d0ece2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#000125897c0950c988815ac097d4cc35">setDefaultBlendMode</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set defualt blend mode.  <a href="#000125897c0950c988815ac097d4cc35"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#caadcf5c2723a4dd6dec8f54bc4bda3b">setVertexLighting</a> (const bool &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set vertex light state.  <a href="#caadcf5c2723a4dd6dec8f54bc4bda3b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhRenderSystem.htm#6ab504d251ff332885e98d02095f7a0c">getVertexLighting</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get vertex light state.  <a href="#6ab504d251ff332885e98d02095f7a0c"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The render system. 
<p>
This is the heart of <a class="el" href="namespacephoenix.htm" title="The phoenix namespace.">phoenix</a>. On the basic level it provides a layer over OpenGL. It provides primitive drawing functions as well as functions for drawing textures and text. It provides functions for loading textures, as well as manipulating the window. <hr><h2>Member Function Documentation</h2>
<a class="anchor" name="ade55bf5fb4fc6a407d0f791d7936ab0"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawIndexedLine" ref="ade55bf5fb4fc6a407d0f791d7936ab0" args="(GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;vertcount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawIndexedLine           </td>
          <td>(</td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>vertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>tcoords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>indexlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>vertcount</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw indexed line. 
<p>
Provides the ability to quickly draw an indexed line to OpenGL. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>vertices</em>&nbsp;</td><td>The list of vertices in the triangle list. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>normals</em>&nbsp;</td><td>The list of normals for each vertex (this is usually just &lt;0,0,1&gt;). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>tcoords</em>&nbsp;</td><td>The list of texture coords for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>colors</em>&nbsp;</td><td>The list of colors for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indexlist</em>&nbsp;</td><td>The order of the vertices. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vertcount</em>&nbsp;</td><td>The number of vertices. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd>drawIndexedTriangleFran(), <a class="el" href="classphoenix_1_1PhRenderSystem.htm#39aa04d2ebf11f86587c361799ee7500" title="Draw indexed trangle list.">drawIndexedTriangleList()</a>, <a class="el" href="classphoenix_1_1PhRenderSystem.htm#0c65ffd04a4b6900b41d589fbd141662" title="Draw line.">drawLine()</a>, <a class="el" href="classphoenix_1_1PhRenderSystem.htm#8c5fc257f068a74f18e7f85ba5679ef7" title="Draw ray.">drawRay()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="97b5970c063466bdaff82682e9e22c52"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawIndexedTriangleFan" ref="97b5970c063466bdaff82682e9e22c52" args="(GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;vertcount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawIndexedTriangleFan           </td>
          <td>(</td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>vertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>tcoords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>indexlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>vertcount</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw indexed trangle fan. 
<p>
Provides the ability to quickly draw an indexed triangle fan to OpenGL. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>vertices</em>&nbsp;</td><td>The list of vertices in the triangle fan. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>normals</em>&nbsp;</td><td>The list of normals for each vertex (this is usually just &lt;0,0,1&gt;). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>tcoords</em>&nbsp;</td><td>The list of texture coords for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>colors</em>&nbsp;</td><td>The list of colors for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indexlist</em>&nbsp;</td><td>The order of the vertices. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vertcount</em>&nbsp;</td><td>The number of vertices. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#39aa04d2ebf11f86587c361799ee7500" title="Draw indexed trangle list.">drawIndexedTriangleList()</a>, <a class="el" href="classphoenix_1_1PhRenderSystem.htm#ade55bf5fb4fc6a407d0f791d7936ab0" title="Draw indexed line.">drawIndexedLine()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="39aa04d2ebf11f86587c361799ee7500"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawIndexedTriangleList" ref="39aa04d2ebf11f86587c361799ee7500" args="(GLfloat *vertices, GLfloat *normals, GLfloat *tcoords, GLuint *colors, GLuint *indexlist, const int &amp;tricount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawIndexedTriangleList           </td>
          <td>(</td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>vertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>normals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLfloat *&nbsp;</td>
          <td class="paramname"> <em>tcoords</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>colors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GLuint *&nbsp;</td>
          <td class="paramname"> <em>indexlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>tricount</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw indexed trangle list. 
<p>
Provides the ability to quickly draw an indexed triangle list to OpenGL. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>vertices</em>&nbsp;</td><td>The list of vertices in the triangle list. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>normals</em>&nbsp;</td><td>The list of normals for each vertex (this is usually just &lt;0,0,1&gt;). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>tcoords</em>&nbsp;</td><td>The list of texture coords for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>colors</em>&nbsp;</td><td>The list of colors for each vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indexlist</em>&nbsp;</td><td>The list of each vertex that makes up each triangle. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>tricount</em>&nbsp;</td><td>The number of trangles. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#97b5970c063466bdaff82682e9e22c52" title="Draw indexed trangle fan.">drawIndexedTriangleFan()</a>, <a class="el" href="classphoenix_1_1PhRenderSystem.htm#ade55bf5fb4fc6a407d0f791d7936ab0" title="Draw indexed line.">drawIndexedLine()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="0c65ffd04a4b6900b41d589fbd141662"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawLine" ref="0c65ffd04a4b6900b41d589fbd141662" args="(const PhVector2d &amp;v1=PhVector2d(0, 0), const PhVector2d &amp;v2=PhVector2d(0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawLine           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw line. 
<p>
Draws a 2D line with a color for each vertex. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>v1</em>&nbsp;</td><td>The vector to the first point of the line. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>v2</em>&nbsp;</td><td>The vector to the second point of the line. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth of the line. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Color of the first vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>Color of the second vertex. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#8c5fc257f068a74f18e7f85ba5679ef7" title="Draw ray.">drawRay()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="18a786d2b7f34eea267f99f30764a97d"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawPolygon" ref="18a786d2b7f34eea267f99f30764a97d" args="(const PhPolygon &amp;P, const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawPolygon           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draws a polygon. 
<p>
Simply draws a polygon with the given depth and color. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P</em>&nbsp;</td><td>Polygon to draw. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>Depth to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Color to draw it with. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>textured</em>&nbsp;</td><td>If this is false, then texturing will be disabled while this polygon is draw. If it is enabled then the currently binded texture will be used. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="8c5fc257f068a74f18e7f85ba5679ef7"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawRay" ref="8c5fc257f068a74f18e7f85ba5679ef7" args="(const PhVector2d &amp;origin=PhVector2d(0, 0), const PhVector2d &amp;ray=PhVector2d(0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawRay           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>origin</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>ray</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw ray. 
<p>
Draws a 2D ray with a color for each vertex starting from the origin. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>origin</em>&nbsp;</td><td>The vector to the origin. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ray</em>&nbsp;</td><td>The vector trepresentation of the ray. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth of the ray. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Color of the first vertex. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>Color of the second vertex. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#0c65ffd04a4b6900b41d589fbd141662" title="Draw line.">drawLine()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="dc306f2312c3474d5bb4c58411ffd390"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawRectangle" ref="dc306f2312c3474d5bb4c58411ffd390" args="(const PhRect &amp;r=PhRect(0, 0, 0, 0), const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const PhColor &amp;b=PhColor(255, 255, 255), const PhColor &amp;c=PhColor(255, 255, 255), const PhColor &amp;d=PhColor(255, 255, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawRectangle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em> = <code><a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a>(0,&nbsp;0,&nbsp;0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>d</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw rectangle. 
<p>
Draws a rectangle with a color for each corner. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The rectangle to be drawn. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth of the rectangle. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Color of the top-left corner. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>Color of the top-right corner. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Color of the bottom-right corner. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>d</em>&nbsp;</td><td>Color of the bottom-left corner. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="cda0ab0c39cc128feedecde13e59e59e"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawText" ref="cda0ab0c39cc128feedecde13e59e59e" args="(const std::string &amp;text, const PhVector2d &amp;pos, const PhColor &amp;color=PhColor(255, 255, 255), const float &amp;depth=0.0f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawText           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>color</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw text. 
<p>
Draws a texture using the current font. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>text</em>&nbsp;</td><td>The text to draw. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pos</em>&nbsp;</td><td>Where to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>The color of the font. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth to draw it at. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd>loadFont() </dd></dl>

</div>
</div><p>
<a class="anchor" name="279947709b3a7e029f997fd4044a5d89"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawTexture" ref="279947709b3a7e029f997fd4044a5d89" args="(PhTexture *source, const PhVector2d &amp;pos, const float &amp;depth=0.0f, const float &amp;rot=0.0f, const PhVector2d &amp;scale=PhVector2d(1.0f, 1.0f), const PhColor &amp;color=PhColor(255, 255, 255), const bool &amp;hflip=false, const bool &amp;vflip=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawTexture           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>rot</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>scale</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f,&nbsp;1.0f)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>color</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>hflip</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>vflip</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw texture. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>source</em>&nbsp;</td><td>The texture to draw. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pos</em>&nbsp;</td><td>Where to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rot</em>&nbsp;</td><td>Rotation (in degrees). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>scale</em>&nbsp;</td><td>Scale. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>Color. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>If true, flip horizontally. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>If true, vertically. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#24b4a578667cb1f29d2ad895ccde124d" title="Draw texture part.">drawTexturePart()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="516d686ff6b4b74cf15f5c7b525edb09"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawTexturedPolygon" ref="516d686ff6b4b74cf15f5c7b525edb09" args="(const PhPolygon &amp;P, PhTexture *texture, const float &amp;depth=0.0f, const PhColor &amp;a=PhColor(255, 255, 255), const bool &amp;eyespace=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawTexturedPolygon           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>texture</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>eyespace</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draws a textured polygon. 
<p>
Draws a polygon with the given depth and color and applies the given texture to the polygon. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P</em>&nbsp;</td><td>Polygon to draw. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>texture</em>&nbsp;</td><td>The texture that will be applied to the polygon. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>Depth to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Color to draw it with. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>eyespace</em>&nbsp;</td><td>If true, it generates texture coordinates in eyespace instead of object space. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="24b4a578667cb1f29d2ad895ccde124d"></a><!-- doxytag: member="phoenix::PhRenderSystem::drawTexturePart" ref="24b4a578667cb1f29d2ad895ccde124d" args="(PhTexture *source, const PhVector2d &amp;pos, const PhRect &amp;rect, const float &amp;depth=0.0f, const float &amp;rot=0.0f, const PhVector2d &amp;scale=PhVector2d(1.0f, 1.0f), const PhColor &amp;color=PhColor(255, 255, 255), const bool &amp;hflip=false, const bool &amp;vflip=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::drawTexturePart           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>rot</em> = <code>0.0f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>scale</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f,&nbsp;1.0f)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>color</em> = <code><a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>hflip</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>vflip</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw texture part. 
<p>
Draws a texture with a clipping rectangle. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>source</em>&nbsp;</td><td>The texture to draw. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pos</em>&nbsp;</td><td>Where to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rect</em>&nbsp;</td><td>The clipping rectangle. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>depth</em>&nbsp;</td><td>The depth to draw it at. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rot</em>&nbsp;</td><td>Rotation (in degrees). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>scale</em>&nbsp;</td><td>Scale. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>Color. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>If true, flip horizontally. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>If true, vertically. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#279947709b3a7e029f997fd4044a5d89" title="Draw texture.">drawTexture()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="ddb2013389ce84adfb0a1f3978779610"></a><!-- doxytag: member="phoenix::PhRenderSystem::getEventHandler" ref="ddb2013389ce84adfb0a1f3978779610" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhEventHandler.htm">PhEventHandler</a>* phoenix::PhRenderSystem::getEventHandler           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get event handler. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to the event handler used by the system. </dd></dl>

</div>
</div><p>
<a class="anchor" name="802c76f7b2ccd2c9e5d29ee980bf7fbe"></a><!-- doxytag: member="phoenix::PhRenderSystem::getFont" ref="802c76f7b2ccd2c9e5d29ee980bf7fbe" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a>* phoenix::PhRenderSystem::getFont           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get font. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current textured used as a font. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#2a6f05d94d2e11bfda8a34802965a13d" title="Set font.">setFont()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="a7fc301da2eaba14ce03731aedf18e09"></a><!-- doxytag: member="phoenix::PhRenderSystem::getFPS" ref="a7fc301da2eaba14ce03731aedf18e09" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float phoenix::PhRenderSystem::getFPS           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get frames per second. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The average FPS over the total run time of the program. </dd></dl>

<p>References <a class="el" href="classphoenix_1_1PhTimer.htm#37f18186b40430d8aaf4e8adc1fdbf28">phoenix::PhTimer::getTicks()</a>.</p>

</div>
</div><p>
<a class="anchor" name="640a96caf3bfdd05735cf653f4e629bd"></a><!-- doxytag: member="phoenix::PhRenderSystem::getLogManager" ref="640a96caf3bfdd05735cf653f4e629bd" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhLogManager.htm">PhLogManager</a>* phoenix::PhRenderSystem::getLogManager           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get log manager. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to the log manager. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ee24592b4ceb2f31bc26dd6069ba35d4"></a><!-- doxytag: member="phoenix::PhRenderSystem::getScreenSize" ref="ee24592b4ceb2f31bc26dd6069ba35d4" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhRenderSystem::getScreenSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get screen size. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The size of the screen. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4078d53b8dc23fed10a88620b04fa1a6"></a><!-- doxytag: member="phoenix::PhRenderSystem::getTextureManager" ref="4078d53b8dc23fed10a88620b04fa1a6" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhTextureManager.htm">PhTextureManager</a>* phoenix::PhRenderSystem::getTextureManager           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get texture manager. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to the texture manager. </dd></dl>

</div>
</div><p>
<a class="anchor" name="6597e29149681935a9ed05db2a10da8d"></a><!-- doxytag: member="phoenix::PhRenderSystem::getTicks" ref="6597e29149681935a9ed05db2a10da8d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double phoenix::PhRenderSystem::getTicks           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get ticks. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of ticks (ms) that have occured since the engine started. </dd></dl>

<p>References <a class="el" href="classphoenix_1_1PhTimer.htm#37f18186b40430d8aaf4e8adc1fdbf28">phoenix::PhTimer::getTicks()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6ab504d251ff332885e98d02095f7a0c"></a><!-- doxytag: member="phoenix::PhRenderSystem::getVertexLighting" ref="6ab504d251ff332885e98d02095f7a0c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool&amp; phoenix::PhRenderSystem::getVertexLighting           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get vertex light state. 
<p>
Gets the current state of vertex lighting. 
</div>
</div><p>
<a class="anchor" name="896168af706a0fffd82a6cb92939a82b"></a><!-- doxytag: member="phoenix::PhRenderSystem::getVertexLightSystem" ref="896168af706a0fffd82a6cb92939a82b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhVertexLightSystem.htm">PhVertexLightSystem</a>* phoenix::PhRenderSystem::getVertexLightSystem           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get vertex light system. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to vertex light system. </dd></dl>

</div>
</div><p>
<a class="anchor" name="673f8847b0cc359769811cff266950ad"></a><!-- doxytag: member="phoenix::PhRenderSystem::initSystem" ref="673f8847b0cc359769811cff266950ad" args="(const PhVector2d &amp;sc=PhVector2d(640, 480), const bool &amp;fs=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool phoenix::PhRenderSystem::initSystem           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>sc</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(640,&nbsp;480)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>fs</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Init system. 
<p>
Sets up everything needed by the render system. This should be called at the beginning of the program and is required to use any of the render system's functions. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sc</em>&nbsp;</td><td>The size of the screen (default 640,480). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>fs</em>&nbsp;</td><td>Full screen (default false). </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if it succeeded in creating a window &amp; an opengl render context. </dd></dl>

</div>
</div><p>
<a class="anchor" name="d5f821c8623c12b272c99a0cb64cd260"></a><!-- doxytag: member="phoenix::PhRenderSystem::loadTexture" ref="d5f821c8623c12b272c99a0cb64cd260" args="(const std::string &amp;filename, const bool &amp;linear=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a>* phoenix::PhRenderSystem::loadTexture           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>linear</em> = <code>true</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Load texture. 
<p>
Loads an image as a texture and adds it to the texture manager for garbage collection. Currently only .png files are supported. More formats are planned. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>The filename of the image to load. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>linear</em>&nbsp;</td><td>Tells the loader to use linear filtering or not. (default true). </td></tr>
  </table>
</dl>
<dl class="note" compact><dt><b>Note:</b></dt><dd>Use nearest filtering for tilemaps, or anything that may look bad when scaled. <p>
Textures must be sizes that are a power of two. NPOT textures will experience artifacts. </dd></dl>

</div>
</div><p>
<a class="anchor" name="02af637bc2b139058e769afb2878e291"></a><!-- doxytag: member="phoenix::PhRenderSystem::run" ref="02af637bc2b139058e769afb2878e291" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool phoenix::PhRenderSystem::run           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Run. 
<p>
This is one of the required functions of the render system. This should be called before all drawing functions and should be called once per frame. (perferably in a while loop). 
</div>
</div><p>
<a class="anchor" name="ce6007108e8771dbe0ec8a51c9d0ece2"></a><!-- doxytag: member="phoenix::PhRenderSystem::setBlendMode" ref="ce6007108e8771dbe0ec8a51c9d0ece2" args="(const GLenum &amp;src, const GLenum &amp;dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setBlendMode           </td>
          <td>(</td>
          <td class="paramtype">const GLenum &amp;&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const GLenum &amp;&nbsp;</td>
          <td class="paramname"> <em>dst</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set blend mode. 
<p>
Sets the blend mode for opengl. The defualt blend mode is GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>The source factor, can be GL_ZERO, GL_ONE, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, and GL_SRC_ALPHA_SATURATE </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dst</em>&nbsp;</td><td>The destination factor, can be GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, and GL_ONE_MINUS_DST_ALPHA </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#000125897c0950c988815ac097d4cc35" title="Set defualt blend mode.">setDefaultBlendMode()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhRenderSystem_8h-source.htm#l00376">setDefaultBlendMode()</a>.</p>

</div>
</div><p>
<a class="anchor" name="000125897c0950c988815ac097d4cc35"></a><!-- doxytag: member="phoenix::PhRenderSystem::setDefaultBlendMode" ref="000125897c0950c988815ac097d4cc35" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setDefaultBlendMode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set defualt blend mode. 
<p>
Restores the engine to it's default blend mode (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA). <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#ce6007108e8771dbe0ec8a51c9d0ece2" title="Set blend mode.">setBlendMode()</a> </dd></dl>

<p>References <a class="el" href="PhRenderSystem_8h-source.htm#l00369">setBlendMode()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2a6f05d94d2e11bfda8a34802965a13d"></a><!-- doxytag: member="phoenix::PhRenderSystem::setFont" ref="2a6f05d94d2e11bfda8a34802965a13d" args="(PhTexture *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setFont           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>t</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set font. 
<p>
Sets the font to the given texture. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t</em>&nbsp;</td><td>The new font. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm#802c76f7b2ccd2c9e5d29ee980bf7fbe" title="Get font.">getFont()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="caadcf5c2723a4dd6dec8f54bc4bda3b"></a><!-- doxytag: member="phoenix::PhRenderSystem::setVertexLighting" ref="caadcf5c2723a4dd6dec8f54bc4bda3b" args="(const bool &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setVertexLighting           </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set vertex light state. 
<p>
Enables or disables vertex lighting. 
</div>
</div><p>
<a class="anchor" name="68bc6d02c3cd02645d9a5cb8602ec9b9"></a><!-- doxytag: member="phoenix::PhRenderSystem::setVertexLightSystem" ref="68bc6d02c3cd02645d9a5cb8602ec9b9" args="(PhVertexLightSystem *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setVertexLightSystem           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhVertexLightSystem.htm">PhVertexLightSystem</a> *&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set vertex light system. 
<p>
Allows you to change the light system to another 
</div>
</div><p>
<a class="anchor" name="75a3cdec5e5e8f0ce7890592fd831a32"></a><!-- doxytag: member="phoenix::PhRenderSystem::setWindowCaption" ref="75a3cdec5e5e8f0ce7890592fd831a32" args="(const std::string &amp;str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhRenderSystem::setWindowCaption           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>str</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set window caption. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>str</em>&nbsp;</td><td>The new caption of the window. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>svn/0.3/libPhoenixGL/<a class="el" href="PhRenderSystem_8h-source.htm">PhRenderSystem.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:42:33 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
