<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhSceneManager Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.3 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a></div>
<h1>phoenix::PhSceneManager Class Reference</h1><!-- doxytag: class="phoenix::PhSceneManager" -->Scene Manger Class.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;PhSceneManager.h&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhSceneManager-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#016ad5d9eba5578313c363d79f7f20ab">PhSceneManager</a> (<a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#016ad5d9eba5578313c363d79f7f20ab"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#d623cd49b35c08255bd54b7d5ad7f598">~PhSceneManager</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#d623cd49b35c08255bd54b7d5ad7f598"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#6ccf3f7b1bb554b547229ff10271c8cf">getRenderSystem</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get render system call.  <a href="#6ccf3f7b1bb554b547229ff10271c8cf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#9031f7d7687215a985cafb7aa2b79c25">addNode</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Adds a scene node to the list.  <a href="#9031f7d7687215a985cafb7aa2b79c25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#89c6e219fab896d0b45b0ce3519155ff">removeNode</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes a node from the list.  <a href="#89c6e219fab896d0b45b0ce3519155ff"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#1149b3ad6ee9d8fc4e069b6cdbccf0c1">registerForRendering</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Register a node to be rendered.  <a href="#1149b3ad6ee9d8fc4e069b6cdbccf0c1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#69822e3fc11c631a8cbc1587242259d0">drawAll</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Does one step for all the nodes.  <a href="#69822e3fc11c631a8cbc1587242259d0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#7808ec4bd4d69d263cb0d1204200ee15">getCollisionHandler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the collision handler.  <a href="#7808ec4bd4d69d263cb0d1204200ee15"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#171269dc73f3a6d65b8baa2df207c3b9">setCollisionHandler</a> (<a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets a collision handler.  <a href="#171269dc73f3a6d65b8baa2df207c3b9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#8ea321f3ab16536cf3a0ea332f6c92fd">getView</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the current view.  <a href="#8ea321f3ab16536cf3a0ea332f6c92fd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#12ea17ca4a4609404179fec45f1534ee">setView</a> (<a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the current view.  <a href="#12ea17ca4a4609404179fec45f1534ee"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#0b989a762c31685444abd9ebe389cd48">setView</a> (int x, int y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the current view.  <a href="#0b989a762c31685444abd9ebe389cd48"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#472ad6f8841ca6f3a692a56fafbe4e96">system</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pointer to <a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a>.  <a href="#472ad6f8841ca6f3a692a56fafbe4e96"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector<br>
&lt; <a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#24f7b89f0cfef18e7603615d83e3e317">nodes</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector containing all the nodes.  <a href="#24f7b89f0cfef18e7603615d83e3e317"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector<br>
&lt; <a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#4cb1238942918df44f58d75024121bad">rendernodes</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">List of nodes to be rendered.  <a href="#4cb1238942918df44f58d75024121bad"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113">colhandle</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pointer to the collision handler.  <a href="#cfe2e0ad5a06fab6811d144468e53113"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#cc38c380fdb9877b6960c84d4bb09812">nodecount</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Number of nodes.  <a href="#cc38c380fdb9877b6960c84d4bb09812"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#c8f2d79d0fb6dba73f08bf527413dba5">rnodecount</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Number of nodes to be rendered.  <a href="#c8f2d79d0fb6dba73f08bf527413dba5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#f8ba03b903d3b6aaee9a0b2715e977f0">defview</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The default view.  <a href="#f8ba03b903d3b6aaee9a0b2715e977f0"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Scene Manger Class. 
<p>
This is the <a class="el" href="namespacephoenix.htm" title="The phoenix namespace.">phoenix</a> scene manager. This allows for a representation of all objects in the game through the use of nodes. All objects are nodes and all nodes are dervied from <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. This class organizes and manages all scene nodes. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="016ad5d9eba5578313c363d79f7f20ab"></a><!-- doxytag: member="phoenix::PhSceneManager::PhSceneManager" ref="016ad5d9eba5578313c363d79f7f20ab" args="(PhRenderSystem *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PhSceneManager::PhSceneManager           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Simply makes a new scenemanager that uses the defined rendersystem <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>A pointer to the rendersystem that every object will use. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="d623cd49b35c08255bd54b7d5ad7f598"></a><!-- doxytag: member="phoenix::PhSceneManager::~PhSceneManager" ref="d623cd49b35c08255bd54b7d5ad7f598" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PhSceneManager::~PhSceneManager           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>
Deletes all nodes in the list. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="6ccf3f7b1bb554b547229ff10271c8cf"></a><!-- doxytag: member="phoenix::PhSceneManager::getRenderSystem" ref="6ccf3f7b1bb554b547229ff10271c8cf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> * PhSceneManager::getRenderSystem           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get render system call. 
<p>
Returns a pointer to the render system used by this scenemanger. <dl class="see" compact><dt><b>See also:</b></dt><dd>phoenix::PhRenderSystem() </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to phoenix::PhRenderSystem(). </dd></dl>

</div>
</div><p>
<a class="anchor" name="9031f7d7687215a985cafb7aa2b79c25"></a><!-- doxytag: member="phoenix::PhSceneManager::addNode" ref="9031f7d7687215a985cafb7aa2b79c25" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::addNode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a scene node to the list. 
<p>
Pushes a scene node onto the list. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="89c6e219fab896d0b45b0ce3519155ff"></a><!-- doxytag: member="phoenix::PhSceneManager::removeNode" ref="89c6e219fab896d0b45b0ce3519155ff" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::removeNode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes a node from the list. 
<p>
Finds and removes the node given from the list. Does not actually delete the node. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="1149b3ad6ee9d8fc4e069b6cdbccf0c1"></a><!-- doxytag: member="phoenix::PhSceneManager::registerForRendering" ref="1149b3ad6ee9d8fc4e069b6cdbccf0c1" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::registerForRendering           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register a node to be rendered. 
<p>
Registers a scene node to the lists of nodes to be rendered. This list is depth sorted after the pre render pass and then only the nodes in this list have their <a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a> function called. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#69822e3fc11c631a8cbc1587242259d0" title="Does one step for all the nodes.">drawAll()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="69822e3fc11c631a8cbc1587242259d0"></a><!-- doxytag: member="phoenix::PhSceneManager::drawAll" ref="69822e3fc11c631a8cbc1587242259d0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::drawAll           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Does one step for all the nodes. 
<p>
This function's name is a bit misleading (change in future versions?). This call is the main point of the scene manager. It does the following: 1) Calls onPreRender() for all the nodes 2) If applicable, check for collisions 3) Sorts all the nodes to be "drawn" 4) Calls onRender() for the sorted nodes in order 5) Calls onPostRender() for all nodes. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#1149b3ad6ee9d8fc4e069b6cdbccf0c1" title="Register a node to be rendered.">registerForRendering()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#171269dc73f3a6d65b8baa2df207c3b9" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="7808ec4bd4d69d263cb0d1204200ee15"></a><!-- doxytag: member="phoenix::PhSceneManager::getCollisionHandler" ref="7808ec4bd4d69d263cb0d1204200ee15" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> * PhSceneManager::getCollisionHandler           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the collision handler. 
<p>
This gets the currently collision handler that the scene manager is using to test collisions with. <dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a> </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#171269dc73f3a6d65b8baa2df207c3b9" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="171269dc73f3a6d65b8baa2df207c3b9"></a><!-- doxytag: member="phoenix::PhSceneManager::setCollisionHandler" ref="171269dc73f3a6d65b8baa2df207c3b9" args="(PhPolygonCollisionHandler *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::setCollisionHandler           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets a collision handler. 
<p>
This sets the collision manager that the scene manager will use to check for collisions. If this is set, then <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#0c3eaece566523d31cdd105e3feb6038" title="Test collisions.">phoenix::PhPolygonCollisionHandler::testCollisions()</a> is called after every prerender pass. If it is null then of course nothing happens. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>A pointer to <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#7808ec4bd4d69d263cb0d1204200ee15" title="Gets the collision handler.">getCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#69822e3fc11c631a8cbc1587242259d0" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113" title="Pointer to the collision handler.">colhandle</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="8ea321f3ab16536cf3a0ea332f6c92fd"></a><!-- doxytag: member="phoenix::PhSceneManager::getView" ref="8ea321f3ab16536cf3a0ea332f6c92fd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> * PhSceneManager::getView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the current view. 
<p>
Simply returns a pointer to the current view used by the scene manager. <dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#12ea17ca4a4609404179fec45f1534ee" title="Sets the current view.">setView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="12ea17ca4a4609404179fec45f1534ee"></a><!-- doxytag: member="phoenix::PhSceneManager::setView" ref="12ea17ca4a4609404179fec45f1534ee" args="(PhView *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::setView           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the current view. 
<p>
Sets the current view to the given view. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>a pointer to the new view </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8ea321f3ab16536cf3a0ea332f6c92fd" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="0b989a762c31685444abd9ebe389cd48"></a><!-- doxytag: member="phoenix::PhSceneManager::setView" ref="0b989a762c31685444abd9ebe389cd48" args="(int x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhSceneManager::setView           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the current view. 
<p>
Lazy version that simply changes the x and y of the current view. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>The new X coordinate of the view. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>The new Y coordinate of the view. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8ea321f3ab16536cf3a0ea332f6c92fd" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="472ad6f8841ca6f3a692a56fafbe4e96"></a><!-- doxytag: member="phoenix::PhSceneManager::system" ref="472ad6f8841ca6f3a692a56fafbe4e96" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#472ad6f8841ca6f3a692a56fafbe4e96">phoenix::PhSceneManager::system</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pointer to <a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a>. 
<p>
Stores a pointer the render system used to draw all the nodes. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#6ccf3f7b1bb554b547229ff10271c8cf" title="Get render system call.">getRenderSystem()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="24f7b89f0cfef18e7603615d83e3e317"></a><!-- doxytag: member="phoenix::PhSceneManager::nodes" ref="24f7b89f0cfef18e7603615d83e3e317" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a>*&gt; <a class="el" href="classphoenix_1_1PhSceneManager.htm#24f7b89f0cfef18e7603615d83e3e317">phoenix::PhSceneManager::nodes</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Vector containing all the nodes. 
<p>
This is a vector that contains pointers to every node in the scene graph. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#9031f7d7687215a985cafb7aa2b79c25" title="Adds a scene node to the list.">addNode()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#89c6e219fab896d0b45b0ce3519155ff" title="Removes a node from the list.">removeNode()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="4cb1238942918df44f58d75024121bad"></a><!-- doxytag: member="phoenix::PhSceneManager::rendernodes" ref="4cb1238942918df44f58d75024121bad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a>*&gt; <a class="el" href="classphoenix_1_1PhSceneManager.htm#4cb1238942918df44f58d75024121bad">phoenix::PhSceneManager::rendernodes</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
List of nodes to be rendered. 
<p>
This is a list of all nodes that call <a class="el" href="classphoenix_1_1PhSceneManager.htm#1149b3ad6ee9d8fc4e069b6cdbccf0c1" title="Register a node to be rendered.">registerForRendering()</a>, it is sorted and used to call <a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a> in order. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#69822e3fc11c631a8cbc1587242259d0" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#1149b3ad6ee9d8fc4e069b6cdbccf0c1" title="Register a node to be rendered.">registerForRendering()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="cfe2e0ad5a06fab6811d144468e53113"></a><!-- doxytag: member="phoenix::PhSceneManager::colhandle" ref="cfe2e0ad5a06fab6811d144468e53113" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113">phoenix::PhSceneManager::colhandle</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pointer to the collision handler. 
<p>
This holds a pointer to phoenix::PhPolygonCollisionHanlder. When this is not null, the scene manager takes care of checking for collisions and does it after the pre-render sweep and before the render sweep. <dl class="see" compact><dt><b>See also:</b></dt><dd>phoenix::PhCollisionHandler, <a class="el" href="classphoenix_1_1PhSceneManager.htm#69822e3fc11c631a8cbc1587242259d0" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#171269dc73f3a6d65b8baa2df207c3b9" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#7808ec4bd4d69d263cb0d1204200ee15" title="Gets the collision handler.">getCollisionHandler()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="cc38c380fdb9877b6960c84d4bb09812"></a><!-- doxytag: member="phoenix::PhSceneManager::nodecount" ref="cc38c380fdb9877b6960c84d4bb09812" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classphoenix_1_1PhSceneManager.htm#cc38c380fdb9877b6960c84d4bb09812">phoenix::PhSceneManager::nodecount</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of nodes. 
<p>
A simple count of all the nodes, probably not needed. (Could use std::vector::size()) 
</div>
</div><p>
<a class="anchor" name="c8f2d79d0fb6dba73f08bf527413dba5"></a><!-- doxytag: member="phoenix::PhSceneManager::rnodecount" ref="c8f2d79d0fb6dba73f08bf527413dba5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classphoenix_1_1PhSceneManager.htm#c8f2d79d0fb6dba73f08bf527413dba5">phoenix::PhSceneManager::rnodecount</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of nodes to be rendered. 
<p>
A simple count of all the nodes to be rendered, probably not needed. (Could use std::vector::size()) 
</div>
</div><p>
<a class="anchor" name="f8ba03b903d3b6aaee9a0b2715e977f0"></a><!-- doxytag: member="phoenix::PhSceneManager::defview" ref="f8ba03b903d3b6aaee9a0b2715e977f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#f8ba03b903d3b6aaee9a0b2715e977f0">phoenix::PhSceneManager::defview</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The default view. 
<p>
A simple count of all the nodes, probably not needed. (Could use std::vector::size()) <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8ea321f3ab16536cf3a0ea332f6c92fd" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#12ea17ca4a4609404179fec45f1534ee" title="Sets the current view.">setView()</a> </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>/home/jon/Desktop/Documents/workspace/Phoenix SVN/0.1.1/libPhoenixGL/PhSceneManager.h<li>/home/jon/Desktop/Documents/workspace/Phoenix SVN/0.1.1/libPhoenixGL/PhSceneManager.cpp</ul>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Jan 27 21:54:43 2008 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.3 </small></address>
</body>
</html>
