<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhVector2d Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.3 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a></div>
<h1>phoenix::PhVector2d Class Reference</h1><!-- doxytag: class="phoenix::PhVector2d" -->2D Vector class  
<a href="#_details">More...</a>
<p>
<code>#include &lt;PhVector2d.h&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhVector2d-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#793f77dcf7590c5b41c293e735a7d87d">PhVector2d</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#793f77dcf7590c5b41c293e735a7d87d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#a194a64a88d232dc9d89b087a944dadf">PhVector2d</a> (float a, float b)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#a194a64a88d232dc9d89b087a944dadf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#cf0897324686827e29b130c0e701505e">getX</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get X component.  <a href="#cf0897324686827e29b130c0e701505e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#47d267bdd5e9fcb02df32861f1effdae">getY</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Y component.  <a href="#47d267bdd5e9fcb02df32861f1effdae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#6e251b2d9eaa6cfcf8451d4cf283c468">setX</a> (float a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set X component.  <a href="#6e251b2d9eaa6cfcf8451d4cf283c468"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#091ac16492de358a95c4f627dbcfef31">setY</a> (float a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Y component.  <a href="#091ac16492de358a95c4f627dbcfef31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#4fab8a27e4b5279fcb2b14d91086aa2b">normalize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Normalization.  <a href="#4fab8a27e4b5279fcb2b14d91086aa2b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#bd4755421ace54bd8e3fb3be4576157d">getMagnitude</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Magnitude.  <a href="#bd4755421ace54bd8e3fb3be4576157d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#4b24b8186f2f2866206cad264bd60884">getMagnitudeSquared</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Magnitude squared.  <a href="#4b24b8186f2f2866206cad264bd60884"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#51d35d8ea6fc1d85878ee0004d2557fb">project</a> (<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> b)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Projection.  <a href="#51d35d8ea6fc1d85878ee0004d2557fb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#f230d9cf66384f9b51a4fdd1a96608b6">direction</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Direction.  <a href="#f230d9cf66384f9b51a4fdd1a96608b6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#e6eb3c5e42355b6e478f3034d9983ee0">rotate</a> (float angle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate.  <a href="#e6eb3c5e42355b6e478f3034d9983ee0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#6f6c9261ced85f59082831967592fea3">getAngle</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;xE=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get angle.  <a href="#6f6c9261ced85f59082831967592fea3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#9e44ea245bb69801312514d2f92dd5a2">operator^</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;V) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Cross product.  <a href="#9e44ea245bb69801312514d2f92dd5a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#beac2ed518ac4644c005719df677d5cc">operator *</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;V) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Dot product.  <a href="#beac2ed518ac4644c005719df677d5cc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#2ee900689281f6efbc7e1da09a16f120">operator *</a> (PhRotationMatrix &amp;other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Matrix multiplication.  <a href="#2ee900689281f6efbc7e1da09a16f120"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
2D Vector class 
<p>
Provides a fast and efficient way to do vector math. <dl class="note" compact><dt><b>Note:</b></dt><dd>Only the ambigious operators are documented, the others (such as +, -, +=, etc.) are considered obvious and therefore not documented. </dd></dl>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="793f77dcf7590c5b41c293e735a7d87d"></a><!-- doxytag: member="phoenix::PhVector2d::PhVector2d" ref="793f77dcf7590c5b41c293e735a7d87d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhVector2d::PhVector2d           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Basic constructor, creates a zero-length vector &lt;0,0&gt;. 
</div>
</div><p>
<a class="anchor" name="a194a64a88d232dc9d89b087a944dadf"></a><!-- doxytag: member="phoenix::PhVector2d::PhVector2d" ref="a194a64a88d232dc9d89b087a944dadf" args="(float a, float b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PhVector2d::PhVector2d           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Creates a vector with the given rectangular coordinates. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The X component of the vector. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>The Y component of the vector. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="cf0897324686827e29b130c0e701505e"></a><!-- doxytag: member="phoenix::PhVector2d::getX" ref="cf0897324686827e29b130c0e701505e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::getX           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get X component. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The X component of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#6e251b2d9eaa6cfcf8451d4cf283c468" title="Set X component.">setX()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="47d267bdd5e9fcb02df32861f1effdae"></a><!-- doxytag: member="phoenix::PhVector2d::getY" ref="47d267bdd5e9fcb02df32861f1effdae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::getY           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get Y component. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The Y component of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#091ac16492de358a95c4f627dbcfef31" title="Set Y component.">setY()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="6e251b2d9eaa6cfcf8451d4cf283c468"></a><!-- doxytag: member="phoenix::PhVector2d::setX" ref="6e251b2d9eaa6cfcf8451d4cf283c468" args="(float a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhVector2d::setX           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set X component. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The X component of the vector. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#cf0897324686827e29b130c0e701505e" title="Get X component.">getX()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="091ac16492de358a95c4f627dbcfef31"></a><!-- doxytag: member="phoenix::PhVector2d::setY" ref="091ac16492de358a95c4f627dbcfef31" args="(float a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PhVector2d::setY           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set Y component. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The Y component of the vector. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#47d267bdd5e9fcb02df32861f1effdae" title="Get Y component.">getY()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="4fab8a27e4b5279fcb2b14d91086aa2b"></a><!-- doxytag: member="phoenix::PhVector2d::normalize" ref="4fab8a27e4b5279fcb2b14d91086aa2b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::normalize           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Normalization. 
<p>
Normalizes the vector, as in turns in into a unit-length vector. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The length of the vector before normalization. </dd></dl>

</div>
</div><p>
<a class="anchor" name="bd4755421ace54bd8e3fb3be4576157d"></a><!-- doxytag: member="phoenix::PhVector2d::getMagnitude" ref="bd4755421ace54bd8e3fb3be4576157d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::getMagnitude           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Magnitude. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The magnitude (length) of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd>getManitudeSquared(); </dd></dl>

</div>
</div><p>
<a class="anchor" name="4b24b8186f2f2866206cad264bd60884"></a><!-- doxytag: member="phoenix::PhVector2d::getMagnitudeSquared" ref="4b24b8186f2f2866206cad264bd60884" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::getMagnitudeSquared           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Magnitude squared. 
<p>
This is much faster than the above because it does not bother to take the square root. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The squared magnitude (length) of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#bd4755421ace54bd8e3fb3be4576157d" title="Magnitude.">getMagnitude()</a>; </dd></dl>

</div>
</div><p>
<a class="anchor" name="51d35d8ea6fc1d85878ee0004d2557fb"></a><!-- doxytag: member="phoenix::PhVector2d::project" ref="51d35d8ea6fc1d85878ee0004d2557fb" args="(PhVector2d b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> PhVector2d::project           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td>
          <td class="paramname"> <em>b</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Projection. 
<p>
Projects this vector onto vector b. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>Vector to project this vector onto </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The product of projection. </dd></dl>

</div>
</div><p>
<a class="anchor" name="f230d9cf66384f9b51a4fdd1a96608b6"></a><!-- doxytag: member="phoenix::PhVector2d::direction" ref="f230d9cf66384f9b51a4fdd1a96608b6" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> PhVector2d::direction           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Direction. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A unit-length (normalized) vector with the same angle measure as this one. </dd></dl>

</div>
</div><p>
<a class="anchor" name="e6eb3c5e42355b6e478f3034d9983ee0"></a><!-- doxytag: member="phoenix::PhVector2d::rotate" ref="e6eb3c5e42355b6e478f3034d9983ee0" args="(float angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp; PhVector2d::rotate           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>angle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate. 
<p>
Rotates the vector the desired amount. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>The measure of the angle in radians. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The rotated vector. Note that this vector itself is also rotated. </dd></dl>

</div>
</div><p>
<a class="anchor" name="6f6c9261ced85f59082831967592fea3"></a><!-- doxytag: member="phoenix::PhVector2d::getAngle" ref="6f6c9261ced85f59082831967592fea3" args="(const PhVector2d &amp;xE=PhVector2d(1.0f, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::getAngle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>xE</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f,0)</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get angle. 
<p>
Get the angle measure of the vector relative to the reference vector given. By defualt this is &lt;1,0&gt; but it can be changed. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>xE</em>&nbsp;</td><td>The reference vector, by defualt this is &lt;1,0&gt; </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The angle between the reference vector and this vector. </dd></dl>

</div>
</div><p>
<a class="anchor" name="9e44ea245bb69801312514d2f92dd5a2"></a><!-- doxytag: member="phoenix::PhVector2d::operator^" ref="9e44ea245bb69801312514d2f92dd5a2" args="(const PhVector2d &amp;V) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::operator^           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>V</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Cross product. 
<p>
Returns the cross product of the vector. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The cross product. </dd></dl>

</div>
</div><p>
<a class="anchor" name="beac2ed518ac4644c005719df677d5cc"></a><!-- doxytag: member="phoenix::PhVector2d::operator *" ref="beac2ed518ac4644c005719df677d5cc" args="(const PhVector2d &amp;V) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float PhVector2d::operator *           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>V</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Dot product. 
<p>
Returns the dot product. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The dot product. </dd></dl>

</div>
</div><p>
<a class="anchor" name="2ee900689281f6efbc7e1da09a16f120"></a><!-- doxytag: member="phoenix::PhVector2d::operator *" ref="2ee900689281f6efbc7e1da09a16f120" args="(PhRotationMatrix &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> PhVector2d::operator *           </td>
          <td>(</td>
          <td class="paramtype">PhRotationMatrix &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix multiplication. 
<p>
Essentially rotates this vector by the matrix. <dl class="note" compact><dt><b>Note:</b></dt><dd>this is technically mathematically illegal. The matrix should be multiplied by the vector. </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The rotated vector. </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>/home/jon/Desktop/Documents/workspace/Phoenix SVN/0.1.1/libPhoenixGL/PhVector2d.h<li>/home/jon/Desktop/Documents/workspace/Phoenix SVN/0.1.1/libPhoenixGL/PhVector2d.cpp</ul>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Jan 27 21:54:44 2008 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.3 </small></address>
</body>
</html>
