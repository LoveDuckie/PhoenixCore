<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhSpriteAnimation Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhSpriteAnimation.htm">PhSpriteAnimation</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhSpriteAnimation Class Reference</h1><!-- doxytag: class="phoenix::PhSpriteAnimation" --><!-- doxytag: inherits="phoenix::PhSceneNode" -->Sprite Animation.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhSpriteAnimation_8h-source.htm">svn/0.3/libPhoenixGL/PhSpriteAnimation.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for phoenix::PhSpriteAnimation:</div>
<div class="dynsection">
<p><center><img src="classphoenix_1_1PhSpriteAnimation__inherit__graph.png" border="0" usemap="#phoenix_1_1PhSpriteAnimation__inherit__map" alt="Inheritance graph"></center>
<map name="phoenix_1_1PhSpriteAnimation__inherit__map">
<area shape="rect" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype." alt="" coords="17,5,175,32"></map>
<center><font size="2">[<a href="graph_legend.htm">legend</a>]</font></center></div>

<p>
<a href="classphoenix_1_1PhSpriteAnimation-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#ffac1574f9d304beb2d548e9e3848e30">PhSpriteAnimation</a> (<a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a> *s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#ffac1574f9d304beb2d548e9e3848e30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#95c2d8372423b64cbae9a2422974fa09">PhSpriteAnimation</a> (<a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a> *s, <a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *t, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> a, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> p=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0.0f, 0.0f))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#95c2d8372423b64cbae9a2422974fa09"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#368d7104aeed708c32d5f21e2c26a2d0">setTexture</a> (<a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *t)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set texture.  <a href="#368d7104aeed708c32d5f21e2c26a2d0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#67de3f391bb9a168d8d89a752add2445">getTexture</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">GEt Texture.  <a href="#67de3f391bb9a168d8d89a752add2445"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#89b8afa3f532accfdb3fdd1195edefcb">setAnimation</a> (const int &amp;b, const int &amp;e)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set animation.  <a href="#89b8afa3f532accfdb3fdd1195edefcb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#58497032ff10e1ef3e67f79919f3d44c">setFrame</a> (const float &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set frame.  <a href="#58497032ff10e1ef3e67f79919f3d44c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#367f7bf44fc57188c70f561db720b5e5">getFrame</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get frame.  <a href="#367f7bf44fc57188c70f561db720b5e5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c6a670bf2901d54d81e41daa80e3f6d0">setAnimationSpeed</a> (const float &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set animation speed.  <a href="#c6a670bf2901d54d81e41daa80e3f6d0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c92745de7fb8cb710991c86e46d7eaa2">getAnimationSpeed</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get animation speed.  <a href="#c92745de7fb8cb710991c86e46d7eaa2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c05851d8945160d2acc09bfe56946444">setFrameSize</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set frame size.  <a href="#c05851d8945160d2acc09bfe56946444"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#05edcf2c5c13c7aacb97126ee1c024c2">getFrameSize</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get frame size.  <a href="#05edcf2c5c13c7aacb97126ee1c024c2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#20328262fae44598069edf4c8ea245c2">setPosition</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set position.  <a href="#20328262fae44598069edf4c8ea245c2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#3909f4e3a3876e943ce17eea736cbe85">getPosition</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get position.  <a href="#3909f4e3a3876e943ce17eea736cbe85"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#fe98f8e8b82232fb675488b3d4ce6e36">getRotation</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get rotation.  <a href="#fe98f8e8b82232fb675488b3d4ce6e36"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#068cc28a839ee1f66b95993034abd72b">setRotation</a> (const float &amp;r)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set rotation.  <a href="#068cc28a839ee1f66b95993034abd72b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#4bbec69f247fd99fac40a370e3764544">getFlip</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get flip.  <a href="#4bbec69f247fd99fac40a370e3764544"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#b885c1dc90a64d97309a527f208f1538">setFlip</a> (const bool &amp;f)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set flip.  <a href="#b885c1dc90a64d97309a527f208f1538"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#9fcc543b897fc49a002e87e128d8c6bd">getColor</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get color.  <a href="#9fcc543b897fc49a002e87e128d8c6bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#cb9ad85021415be03dcc4f3d36b0747a">setColor</a> (const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;c)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set color.  <a href="#cb9ad85021415be03dcc4f3d36b0747a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#7acd51ae8289f54ca1aa690eccea1916">getScale</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get scale.  <a href="#7acd51ae8289f54ca1aa690eccea1916"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#068c66a71a28d1a94fa5cb9186cabf52">setScale</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set scale.  <a href="#068c66a71a28d1a94fa5cb9186cabf52"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#42e5f12b6c7de0e0ae151468a8407000">setEnabled</a> (const bool &amp;e)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set enabled.  <a href="#42e5f12b6c7de0e0ae151468a8407000"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c0f8fc2dfb1a3d9eff871481bc9046cb">getEnabled</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get enabled.  <a href="#c0f8fc2dfb1a3d9eff871481bc9046cb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#974178fa2fde9014ae2e3505978a74f7">onPreRender</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pre-render call.  <a href="#974178fa2fde9014ae2e3505978a74f7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#32ca1eaa995239a3c02048d5e14465d2">onRender</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Render call.  <a href="#32ca1eaa995239a3c02048d5e14465d2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#9422d23558eed9ff633700b6b9517e19">onPostRender</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Post-render call.  <a href="#9422d23558eed9ff633700b6b9517e19"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4a82af29011f3b12e1112d73b0c9de38"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::texture" ref="4a82af29011f3b12e1112d73b0c9de38" args="" -->
<a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><b>texture</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="962ceae0f1c6f433ef7046494e3be319"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::framesize" ref="962ceae0f1c6f433ef7046494e3be319" args="" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>framesize</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6032ad5d1c4dec1cec3dac640751ae01"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::frame" ref="6032ad5d1c4dec1cec3dac640751ae01" args="" -->
float&nbsp;</td><td class="memItemRight" valign="bottom"><b>frame</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="956b833443342087ac3b6ecfff60f798"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::framerate" ref="956b833443342087ac3b6ecfff60f798" args="" -->
float&nbsp;</td><td class="memItemRight" valign="bottom"><b>framerate</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="826a0ea539da717ca018233f5cfe3a02"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::rot" ref="826a0ea539da717ca018233f5cfe3a02" args="" -->
float&nbsp;</td><td class="memItemRight" valign="bottom"><b>rot</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="2f2ada64f03a78c936fb9ab79c891450"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::mMin" ref="2f2ada64f03a78c936fb9ab79c891450" args="" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><b>mMin</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b8d428de4eabb595bf13da8f4ed563b3"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::mMax" ref="b8d428de4eabb595bf13da8f4ed563b3" args="" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><b>mMax</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4d1299f3013b603046348c0d26304735"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::flip" ref="4d1299f3013b603046348c0d26304735" args="" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>flip</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="927572023506bacdba88e1f97cd79daa"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::color" ref="927572023506bacdba88e1f97cd79daa" args="" -->
<a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>color</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5cfac9e2029900cee581e30c1ce91a7b"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::pos" ref="5cfac9e2029900cee581e30c1ce91a7b" args="" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>pos</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cf6c626eddd58af49ce38a0b97f4cf8b"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::enabled" ref="cf6c626eddd58af49ce38a0b97f4cf8b" args="" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>enabled</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="2bab438941d2ee764996e4dfb2c49c4c"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::scale" ref="2bab438941d2ee764996e4dfb2c49c4c" args="" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>scale</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Sprite Animation. 
<p>
This class provides a simple way to create simple sprite animations from animation cell sheets. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="ffac1574f9d304beb2d548e9e3848e30"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::PhSpriteAnimation" ref="ffac1574f9d304beb2d548e9e3848e30" args="(PhSceneManager *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhSpriteAnimation::PhSpriteAnimation           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a> *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Makes a blank sprite animation. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>A scenemanager. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="95c2d8372423b64cbae9a2422974fa09"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::PhSpriteAnimation" ref="95c2d8372423b64cbae9a2422974fa09" args="(PhSceneManager *s, PhTexture *t, const PhVector2d a, const PhVector2d p=PhVector2d(0.0f, 0.0f))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhSpriteAnimation::PhSpriteAnimation           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a> *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td>
          <td class="paramname"> <em>p</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(0.0f,&nbsp;0.0f)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Makes a sprite animation. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>A scenemanager. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t</em>&nbsp;</td><td>Texture of the sprite sheet. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Size of one cell (sprite). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>Position. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="c92745de7fb8cb710991c86e46d7eaa2"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getAnimationSpeed" ref="c92745de7fb8cb710991c86e46d7eaa2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float&amp; phoenix::PhSpriteAnimation::getAnimationSpeed           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get animation speed. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current animation speed. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c6a670bf2901d54d81e41daa80e3f6d0" title="Set animation speed.">setAnimationSpeed()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="9fcc543b897fc49a002e87e128d8c6bd"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getColor" ref="9fcc543b897fc49a002e87e128d8c6bd" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a>&amp; phoenix::PhSpriteAnimation::getColor           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get color. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current blending color. </dd></dl>

</div>
</div><p>
<a class="anchor" name="c0f8fc2dfb1a3d9eff871481bc9046cb"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getEnabled" ref="c0f8fc2dfb1a3d9eff871481bc9046cb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool&amp; phoenix::PhSpriteAnimation::getEnabled           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get enabled. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the sprite is enabled </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#42e5f12b6c7de0e0ae151468a8407000" title="Set enabled.">setEnabled()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="4bbec69f247fd99fac40a370e3764544"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getFlip" ref="4bbec69f247fd99fac40a370e3764544" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool&amp; phoenix::PhSpriteAnimation::getFlip           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get flip. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>If the sprite is being flipped (horizontally). </dd></dl>

</div>
</div><p>
<a class="anchor" name="367f7bf44fc57188c70f561db720b5e5"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getFrame" ref="367f7bf44fc57188c70f561db720b5e5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float&amp; phoenix::PhSpriteAnimation::getFrame           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get frame. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current frame. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#58497032ff10e1ef3e67f79919f3d44c" title="Set frame.">setFrame()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="05edcf2c5c13c7aacb97126ee1c024c2"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getFrameSize" ref="05edcf2c5c13c7aacb97126ee1c024c2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhSpriteAnimation::getFrameSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get frame size. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current frame (cell) size. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c05851d8945160d2acc09bfe56946444" title="Set frame size.">setFrameSize()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="3909f4e3a3876e943ce17eea736cbe85"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getPosition" ref="3909f4e3a3876e943ce17eea736cbe85" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhSpriteAnimation::getPosition           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get position. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current position. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#20328262fae44598069edf4c8ea245c2" title="Set position.">setPosition()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="fe98f8e8b82232fb675488b3d4ce6e36"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getRotation" ref="fe98f8e8b82232fb675488b3d4ce6e36" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float&amp; phoenix::PhSpriteAnimation::getRotation           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get rotation. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current rotation (in degrees). </dd></dl>

</div>
</div><p>
<a class="anchor" name="7acd51ae8289f54ca1aa690eccea1916"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getScale" ref="7acd51ae8289f54ca1aa690eccea1916" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhSpriteAnimation::getScale           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get scale. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current scale of the sprite. </dd></dl>

</div>
</div><p>
<a class="anchor" name="67de3f391bb9a168d8d89a752add2445"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::getTexture" ref="67de3f391bb9a168d8d89a752add2445" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a>* phoenix::PhSpriteAnimation::getTexture           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
GEt Texture. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current texture. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#368d7104aeed708c32d5f21e2c26a2d0" title="Set texture.">setTexture()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="9422d23558eed9ff633700b6b9517e19"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::onPostRender" ref="9422d23558eed9ff633700b6b9517e19" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::onPostRender           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Post-render call. 
<p>
The third render pass takes place at the end of every frame, the scene manager calls this function for every node in the list, and any code that should happen after everything is drawn should go here. 
<p>Reimplemented from <a class="el" href="classphoenix_1_1PhSceneNode.htm#7048c33dcc9397d0c890222d41de0280">phoenix::PhSceneNode</a>.</p>

</div>
</div><p>
<a class="anchor" name="974178fa2fde9014ae2e3505978a74f7"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::onPreRender" ref="974178fa2fde9014ae2e3505978a74f7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::onPreRender           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pre-render call. 
<p>
All nodes in the list will have this function called by the scenemanger once per frame. Overloading this is required. If the scene node wants to be drawn it must call phoenix::PhSceneManger::registerForRendering(). 
<p>Reimplemented from <a class="el" href="classphoenix_1_1PhSceneNode.htm#aadc8431e4764b5beb8f5dec11b5354f">phoenix::PhSceneNode</a>.</p>

</div>
</div><p>
<a class="anchor" name="32ca1eaa995239a3c02048d5e14465d2"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::onRender" ref="32ca1eaa995239a3c02048d5e14465d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::onRender           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Render call. 
<p>
Any nodes that called phoenix::PhSceneManger::registerForRendering() will first be sorted according to their depth, then this function is called for each node in order. It is highly suggested that you put any drawing code in this function. Of course, it's possible to draw during any of the three node passes, but this pass is the only one that is exclusive (Nodes must register) and is the only one that is depth sorted. 
<p>Reimplemented from <a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0">phoenix::PhSceneNode</a>.</p>

</div>
</div><p>
<a class="anchor" name="89b8afa3f532accfdb3fdd1195edefcb"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setAnimation" ref="89b8afa3f532accfdb3fdd1195edefcb" args="(const int &amp;b, const int &amp;e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setAnimation           </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>e</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set animation. 
<p>
Sets the bounding frames of the animation. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>The begining frame. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>e</em>&nbsp;</td><td>The ending frame. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="c6a670bf2901d54d81e41daa80e3f6d0"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setAnimationSpeed" ref="c6a670bf2901d54d81e41daa80e3f6d0" args="(const float &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setAnimationSpeed           </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set animation speed. 
<p>
Sets the animation speed, animation speed of 1.0f has no skipping frames. Values above 1.0f may skip frames, values below 1.0f will make frames last longer. <dl class="note" compact><dt><b>Note:</b></dt><dd>The speed is dependent on framerate. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The animation speed. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c92745de7fb8cb710991c86e46d7eaa2" title="Get animation speed.">getAnimationSpeed()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="cb9ad85021415be03dcc4f3d36b0747a"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setColor" ref="cb9ad85021415be03dcc4f3d36b0747a" args="(const PhColor &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setColor           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhColor.htm">PhColor</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set color. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>The new blending color. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="42e5f12b6c7de0e0ae151468a8407000"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setEnabled" ref="42e5f12b6c7de0e0ae151468a8407000" args="(const bool &amp;e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setEnabled           </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>e</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set enabled. 
<p>
Enables or disables this sprite. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#c0f8fc2dfb1a3d9eff871481bc9046cb" title="Get enabled.">getEnabled()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="b885c1dc90a64d97309a527f208f1538"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setFlip" ref="b885c1dc90a64d97309a527f208f1538" args="(const bool &amp;f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setFlip           </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>f</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set flip. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>f</em>&nbsp;</td><td>Pass true to flip the sprite (horizontally). </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="58497032ff10e1ef3e67f79919f3d44c"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setFrame" ref="58497032ff10e1ef3e67f79919f3d44c" args="(const float &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setFrame           </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set frame. 
<p>
Forces the frame to change. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The desired frame number. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#367f7bf44fc57188c70f561db720b5e5" title="Get frame.">getFrame()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="c05851d8945160d2acc09bfe56946444"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setFrameSize" ref="c05851d8945160d2acc09bfe56946444" args="(const PhVector2d &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setFrameSize           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set frame size. 
<p>
Sets the current size of one frame (cell) of animation. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>The new cell size. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#05edcf2c5c13c7aacb97126ee1c024c2" title="Get frame size.">getFrameSize()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="20328262fae44598069edf4c8ea245c2"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setPosition" ref="20328262fae44598069edf4c8ea245c2" args="(const PhVector2d &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setPosition           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set position. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>The new position. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#3909f4e3a3876e943ce17eea736cbe85" title="Get position.">getPosition()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="068cc28a839ee1f66b95993034abd72b"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setRotation" ref="068cc28a839ee1f66b95993034abd72b" args="(const float &amp;r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setRotation           </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set rotation. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>New rotation (in degrees). </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="068c66a71a28d1a94fa5cb9186cabf52"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setScale" ref="068c66a71a28d1a94fa5cb9186cabf52" args="(const PhVector2d &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setScale           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set scale. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>The new scale. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="368d7104aeed708c32d5f21e2c26a2d0"></a><!-- doxytag: member="phoenix::PhSpriteAnimation::setTexture" ref="368d7104aeed708c32d5f21e2c26a2d0" args="(PhTexture *t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSpriteAnimation::setTexture           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhTexture.htm">PhTexture</a> *&nbsp;</td>
          <td class="paramname"> <em>t</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set texture. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>t</em>&nbsp;</td><td>New texture. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSpriteAnimation.htm#67de3f391bb9a168d8d89a752add2445" title="GEt Texture.">getTexture()</a> </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>svn/0.3/libPhoenixGL/<a class="el" href="PhSpriteAnimation_8h-source.htm">PhSpriteAnimation.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:29:49 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
