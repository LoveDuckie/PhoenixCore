<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: svn/0.3/libPhoenixGL/PhRotationMatrix.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>svn/0.3/libPhoenixGL/PhRotationMatrix.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2007, Jonathan Wayne Parrott, Denzel Morris</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the "Software"), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE.</span>
<a name="l00022"></a>00022 <span class="comment"></span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef PHROTATIONMATRIX_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define PHROTATIONMATRIX_H</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>phoenix
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032     <span class="comment">//pre-declaration of vector &amp; polygon class.</span>
<a name="l00033"></a>00033     <span class="keyword">class </span>PhVector2d;
<a name="l00034"></a>00034 
<a name="l00036"></a>00036 
<a name="l00041"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm">00041</a>     <span class="keyword">class </span><a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>
<a name="l00042"></a>00042     {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="keyword">public</span>:
<a name="l00045"></a>00045 
<a name="l00047"></a>00047 
<a name="l00050"></a>00050         <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#2f8a9028c21576d876f086e21ee79a67" title="Constructor.">PhRotationMatrix</a>();
<a name="l00051"></a>00051 
<a name="l00053"></a>00053 
<a name="l00060"></a>00060         <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#2f8a9028c21576d876f086e21ee79a67" title="Constructor.">PhRotationMatrix</a>( <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; a, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; b, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; c, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; d);
<a name="l00061"></a>00061 
<a name="l00063"></a>00063 
<a name="l00067"></a>00067         <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#2f8a9028c21576d876f086e21ee79a67" title="Constructor.">PhRotationMatrix</a>( <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; a );
<a name="l00068"></a>00068 
<a name="l00069"></a>00069         <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#2f8a9028c21576d876f086e21ee79a67" title="Constructor.">PhRotationMatrix</a>( <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other ) { (*this) = other; }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         ~<a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>();
<a name="l00072"></a>00072 
<a name="l00074"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm#504a239797e4ef1cbbfeb6db6820f4f5">00074</a>         <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#504a239797e4ef1cbbfeb6db6820f4f5" title="Get element.">getElement</a>( <span class="keyword">const</span> <span class="keywordtype">int</span>&amp; <span class="keywordtype">id</span> )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Elements[0]; }
<a name="l00075"></a>00075 
<a name="l00077"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm#325201b09aa8abdd9cba1639de475da1">00077</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#325201b09aa8abdd9cba1639de475da1" title="Set element.">setElement</a>( <span class="keyword">const</span> <span class="keywordtype">int</span>&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; val ) { Elements[id] = val; }
<a name="l00078"></a>00078 
<a name="l00080"></a>00080 
<a name="l00084"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm#0271fb63ed65d3b342bb71cf7d66dfaa">00084</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#0271fb63ed65d3b342bb71cf7d66dfaa" title="Set rotation.">setRotation</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; rad) { (*this) = <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#2f8a9028c21576d876f086e21ee79a67" title="Constructor.">PhRotationMatrix</a>(rad); }
<a name="l00085"></a>00085 
<a name="l00087"></a>00087 
<a name="l00091"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm#1f4bcfcfcd790bfb5f048ecf895ed3ec">00091</a>         <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#1f4bcfcfcd790bfb5f048ecf895ed3ec" title="Get rotation.">getRotation</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> acos(Elements[0]); }
<a name="l00092"></a>00092 
<a name="l00094"></a>00094 
<a name="l00099"></a><a class="code" href="classphoenix_1_1PhRotationMatrix.htm#e475ff665bb82a66bc1476ff283da0bb">00099</a>         <span class="keywordtype">float</span>&amp; <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#e475ff665bb82a66bc1476ff283da0bb" title="Element access operator.">operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; x) { <span class="keywordflow">return</span>  Elements[x]; }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator+(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00102"></a>00102         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator-(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00103"></a>00103         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator*(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00104"></a>00104         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator*(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; scalar) <span class="keyword">const</span>;
<a name="l00105"></a>00105 
<a name="l00107"></a>00107 
<a name="l00115"></a>00115         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a> operator*(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>&amp; other) <span class="keyword">const</span>;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator/(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00118"></a>00118         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> operator/(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; scalar) <span class="keyword">const</span>;
<a name="l00119"></a>00119 
<a name="l00120"></a>00120         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator+=(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other);
<a name="l00121"></a>00121         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator-=(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other);
<a name="l00122"></a>00122         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator*=(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other);
<a name="l00123"></a>00123         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator*=(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; scalar);
<a name="l00124"></a>00124         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator/=(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other);
<a name="l00125"></a>00125         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; operator/=(<span class="keyword">const</span> <span class="keywordtype">float</span>&amp; scalar);
<a name="l00126"></a>00126 
<a name="l00128"></a>00128 
<a name="l00132"></a>00132         <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#6680adc49ccd794b206ceef5765b6a48" title="Determinant.">getDeterminant</a>() <span class="keyword">const</span>;
<a name="l00133"></a>00133 
<a name="l00135"></a>00135 
<a name="l00139"></a>00139         <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm#0e3ab987bd99bfd70eeaf30572e837fa" title="Inverse.">getInverse</a>() <span class="keyword">const</span>;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00142"></a>00142         <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhRotationMatrix.htm" title="2D Rotation Matrix Class">PhRotationMatrix</a>&amp; other) <span class="keyword">const</span>;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keyword">protected</span>:
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="keywordtype">float</span> Elements[4];
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="keyword">private</span>:
<a name="l00149"></a>00149     };
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">/*Vector class has to be defined before the source*/</span>
<a name="l00154"></a>00154 <span class="preprocessor">#include "PhVector2d.h"</span>
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="preprocessor">#endif // PHROTATIONMATRIX_H</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:38:29 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
