<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhSceneManager Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhSceneManager.htm">PhSceneManager</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhSceneManager Class Reference</h1><!-- doxytag: class="phoenix::PhSceneManager" -->Scene Manager Class.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhSceneManager_8h-source.htm">svn/0.3/libPhoenixGL/PhSceneManager.h</a>&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhSceneManager-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#a46fff1829cad827256819aed4e73369">PhSceneManager</a> (<a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#a46fff1829cad827256819aed4e73369"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#a2a7bc2cbe90966ae9eac3046df3fd70">~PhSceneManager</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#a2a7bc2cbe90966ae9eac3046df3fd70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#03b2e6adf5d2585e0f3df00b9e1c02bc">getRenderSystem</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get render system call.  <a href="#03b2e6adf5d2585e0f3df00b9e1c02bc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#cb4836ead100d43c2b71805d4e46b397">addNode</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Adds a scene node to the list.  <a href="#cb4836ead100d43c2b71805d4e46b397"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#28243f5016e3d1196b39f6f173e8e60c">removeNode</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes a node from the list.  <a href="#28243f5016e3d1196b39f6f173e8e60c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#c7b91ab2264395c1e39bd24f86a1ebe4">registerForRendering</a> (<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Register a node to be rendered.  <a href="#c7b91ab2264395c1e39bd24f86a1ebe4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#839a182f8233ea87b7bc799cb18a423c">drawAll</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Does one step for all the nodes.  <a href="#839a182f8233ea87b7bc799cb18a423c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#1a17aa8826b67c7fb0aa1efe940be31c">getCollisionHandler</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the collision handler.  <a href="#1a17aa8826b67c7fb0aa1efe940be31c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#f33804d294ca1939815f67857647a941">setCollisionHandler</a> (<a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets a collision handler.  <a href="#f33804d294ca1939815f67857647a941"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#2c0d31faa525da30c3148f2b13800ce3">getLightManager</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get light manager.  <a href="#2c0d31faa525da30c3148f2b13800ce3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#ef50ec48045f7c3702043c4887349976">setLightManager</a> (<a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a> *l)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set light manager.  <a href="#ef50ec48045f7c3702043c4887349976"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#3dddf2a02c0533a4cc61d08fbeb9525e">getLightingEnabled</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get lighting state.  <a href="#3dddf2a02c0533a4cc61d08fbeb9525e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#b5fcb95ed78b3700cc380766565ffcf8">setLightingEnabled</a> (const bool &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set lighting state.  <a href="#b5fcb95ed78b3700cc380766565ffcf8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#8f0c03d5168ca97f1e63cfcd230fc64a">getView</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the current view.  <a href="#8f0c03d5168ca97f1e63cfcd230fc64a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#dc6eab121e2e0a96f95a256df44f16d0">setView</a> (<a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the current view.  <a href="#dc6eab121e2e0a96f95a256df44f16d0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#0b91b645d92c30dbe1a129082280b085">setView</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;pos)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the current view.  <a href="#0b91b645d92c30dbe1a129082280b085"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#472ad6f8841ca6f3a692a56fafbe4e96">system</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pointer to <a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a>.  <a href="#472ad6f8841ca6f3a692a56fafbe4e96"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#24f7b89f0cfef18e7603615d83e3e317">nodes</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Vector containing all the nodes.  <a href="#24f7b89f0cfef18e7603615d83e3e317"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#4cb1238942918df44f58d75024121bad">rendernodes</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">List of nodes to be rendered.  <a href="#4cb1238942918df44f58d75024121bad"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113">colhandle</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pointer to the collision handler.  <a href="#cfe2e0ad5a06fab6811d144468e53113"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#9d2c646aef6f91f11c50d6ef8e280b88">lmgr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pointer to the light manager.  <a href="#9d2c646aef6f91f11c50d6ef8e280b88"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#fbf158fa77a948ef0b1424e1f7d33b6e">lightenable</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Lights enable.  <a href="#fbf158fa77a948ef0b1424e1f7d33b6e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhSceneManager.htm#f8ba03b903d3b6aaee9a0b2715e977f0">defview</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The default view.  <a href="#f8ba03b903d3b6aaee9a0b2715e977f0"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Scene Manager Class. 
<p>
This is the <a class="el" href="namespacephoenix.htm" title="The phoenix namespace.">phoenix</a> scene manager. This allows for a representation of all objects in the game through the use of nodes. All objects are nodes and all nodes are dervied from <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. This class organizes and manages all scene nodes. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a46fff1829cad827256819aed4e73369"></a><!-- doxytag: member="phoenix::PhSceneManager::PhSceneManager" ref="a46fff1829cad827256819aed4e73369" args="(PhRenderSystem *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhSceneManager::PhSceneManager           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a> *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
Simply makes a new scenemanager that uses the defined rendersystem <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>A pointer to the rendersystem that every object will use. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="a2a7bc2cbe90966ae9eac3046df3fd70"></a><!-- doxytag: member="phoenix::PhSceneManager::~PhSceneManager" ref="a2a7bc2cbe90966ae9eac3046df3fd70" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhSceneManager::~PhSceneManager           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>
Deletes all nodes in the list. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="cb4836ead100d43c2b71805d4e46b397"></a><!-- doxytag: member="phoenix::PhSceneManager::addNode" ref="cb4836ead100d43c2b71805d4e46b397" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::addNode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a scene node to the list. 
<p>
Pushes a scene node onto the list. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to an instance of <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00064">nodes</a>.</p>

<p>Referenced by <a class="el" href="PhSceneNode_8h-source.htm#l00068">phoenix::PhSceneNode::PhSceneNode()</a>.</p>

</div>
</div><p>
<a class="anchor" name="839a182f8233ea87b7bc799cb18a423c"></a><!-- doxytag: member="phoenix::PhSceneManager::drawAll" ref="839a182f8233ea87b7bc799cb18a423c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::drawAll           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Does one step for all the nodes. 
<p>
This function's name is a bit misleading (change in future versions?). This call is the main point of the scene manager. It does the following:<br>
 1) Sets the view.<br>
 2) Generates the light buffer (if enabled).<br>
 3) Calls onPreRender() for all the nodes<br>
 4) If applicable, check for collisions<br>
 5) Sorts all the nodes to be "drawn"<br>
 6) Calls onRender() for the sorted nodes in order<br>
 7) Draws the light buffer over the scene.<br>
 8) Calls onPostRender() for all nodes.<br>
 <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#c7b91ab2264395c1e39bd24f86a1ebe4" title="Register a node to be rendered.">registerForRendering()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#f33804d294ca1939815f67857647a941" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="1a17aa8826b67c7fb0aa1efe940be31c"></a><!-- doxytag: member="phoenix::PhSceneManager::getCollisionHandler" ref="1a17aa8826b67c7fb0aa1efe940be31c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a>* phoenix::PhSceneManager::getCollisionHandler           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the collision handler. 
<p>
This gets the currently collision handler that the scene manager is using to test collisions with. <dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a> </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#f33804d294ca1939815f67857647a941" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>. </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00081">colhandle</a>.</p>

</div>
</div><p>
<a class="anchor" name="3dddf2a02c0533a4cc61d08fbeb9525e"></a><!-- doxytag: member="phoenix::PhSceneManager::getLightingEnabled" ref="3dddf2a02c0533a4cc61d08fbeb9525e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool&amp; phoenix::PhSceneManager::getLightingEnabled           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get lighting state. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if lights are enabled, otherwise false. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#b5fcb95ed78b3700cc380766565ffcf8" title="Set lighting state.">setLightingEnabled()</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00095">lightenable</a>.</p>

</div>
</div><p>
<a class="anchor" name="2c0d31faa525da30c3148f2b13800ce3"></a><!-- doxytag: member="phoenix::PhSceneManager::getLightManager" ref="2c0d31faa525da30c3148f2b13800ce3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a>* phoenix::PhSceneManager::getLightManager           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get light manager. 
<p>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhLightManager.htm" title="Pixel-Based Light Manager.">PhLightManager</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#ef50ec48045f7c3702043c4887349976" title="Set light manager.">setLightManager()</a>, enableLighting() </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to the current light manager. </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00088">lmgr</a>.</p>

</div>
</div><p>
<a class="anchor" name="03b2e6adf5d2585e0f3df00b9e1c02bc"></a><!-- doxytag: member="phoenix::PhSceneManager::getRenderSystem" ref="03b2e6adf5d2585e0f3df00b9e1c02bc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a>* phoenix::PhSceneManager::getRenderSystem           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get render system call. 
<p>
Returns a pointer to the render system used by this scenemanger. <dl class="see" compact><dt><b>See also:</b></dt><dd>phoenix::PhRenderSystem() </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to phoenix::PhRenderSystem(). </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00057">system</a>.</p>

<p>Referenced by <a class="el" href="PhParticleSystem_8h-source.htm#l00155">phoenix::PhParticleSystem::getRenderSystem()</a>.</p>

</div>
</div><p>
<a class="anchor" name="8f0c03d5168ca97f1e63cfcd230fc64a"></a><!-- doxytag: member="phoenix::PhSceneManager::getView" ref="8f0c03d5168ca97f1e63cfcd230fc64a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a>* phoenix::PhSceneManager::getView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the current view. 
<p>
Simply returns a pointer to the current view used by the scene manager. <dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> containing the current view. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#dc6eab121e2e0a96f95a256df44f16d0" title="Sets the current view.">setView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00102">defview</a>.</p>

</div>
</div><p>
<a class="anchor" name="c7b91ab2264395c1e39bd24f86a1ebe4"></a><!-- doxytag: member="phoenix::PhSceneManager::registerForRendering" ref="c7b91ab2264395c1e39bd24f86a1ebe4" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::registerForRendering           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Register a node to be rendered. 
<p>
Registers a scene node to the lists of nodes to be rendered. This list is depth sorted after the pre render pass and then only the nodes in this list have their <a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a> function called. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to an instance of <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#839a182f8233ea87b7bc799cb18a423c" title="Does one step for all the nodes.">drawAll()</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00072">rendernodes</a>.</p>

</div>
</div><p>
<a class="anchor" name="28243f5016e3d1196b39f6f173e8e60c"></a><!-- doxytag: member="phoenix::PhSceneManager::removeNode" ref="28243f5016e3d1196b39f6f173e8e60c" args="(PhSceneNode *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::removeNode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a> *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes a node from the list. 
<p>
Finds and removes the node given from the list. Does not actually delete the node. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>A pointer to an instance of <a class="el" href="classphoenix_1_1PhSceneNode.htm" title="Scenenode Prototype.">phoenix::PhSceneNode</a>. </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="PhSceneNode_8h-source.htm#l00077">phoenix::PhSceneNode::~PhSceneNode()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f33804d294ca1939815f67857647a941"></a><!-- doxytag: member="phoenix::PhSceneManager::setCollisionHandler" ref="f33804d294ca1939815f67857647a941" args="(PhPolygonCollisionHandler *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::setCollisionHandler           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets a collision handler. 
<p>
This sets the collision manager that the scene manager will use to check for collisions. If this is set, then <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">phoenix::PhPolygonCollisionHandler::testCollisions()</a> is called after every prerender pass. If it is null then of course nothing happens. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>A pointer to an instance of <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#1a17aa8826b67c7fb0aa1efe940be31c" title="Gets the collision handler.">getCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#839a182f8233ea87b7bc799cb18a423c" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113" title="Pointer to the collision handler.">colhandle</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00081">colhandle</a>.</p>

</div>
</div><p>
<a class="anchor" name="b5fcb95ed78b3700cc380766565ffcf8"></a><!-- doxytag: member="phoenix::PhSceneManager::setLightingEnabled" ref="b5fcb95ed78b3700cc380766565ffcf8" args="(const bool &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::setLightingEnabled           </td>
          <td>(</td>
          <td class="paramtype">const bool &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set lighting state. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>True if you want to enable lights, otherwise false. </td></tr>
  </table>
</dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00095">lightenable</a>.</p>

</div>
</div><p>
<a class="anchor" name="ef50ec48045f7c3702043c4887349976"></a><!-- doxytag: member="phoenix::PhSceneManager::setLightManager" ref="ef50ec48045f7c3702043c4887349976" args="(PhLightManager *l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::setLightManager           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a> *&nbsp;</td>
          <td class="paramname"> <em>l</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set light manager. 
<p>
Changes the currently active light manager. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhLightManager.htm" title="Pixel-Based Light Manager.">PhLightManager</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#2c0d31faa525da30c3148f2b13800ce3" title="Get light manager.">getLightManager()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#b5fcb95ed78b3700cc380766565ffcf8" title="Set lighting state.">setLightingEnabled()</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00088">lmgr</a>.</p>

</div>
</div><p>
<a class="anchor" name="0b91b645d92c30dbe1a129082280b085"></a><!-- doxytag: member="phoenix::PhSceneManager::setView" ref="0b91b645d92c30dbe1a129082280b085" args="(const PhVector2d &amp;pos)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::setView           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the current view. 
<p>
Lazy version that simply changes the x and y of the current view. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pos</em>&nbsp;</td><td>The new position of the view </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8f0c03d5168ca97f1e63cfcd230fc64a" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00102">defview</a>, and <a class="el" href="PhView_8h-source.htm#l00097">phoenix::PhView::setPosition()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dc6eab121e2e0a96f95a256df44f16d0"></a><!-- doxytag: member="phoenix::PhSceneManager::setView" ref="dc6eab121e2e0a96f95a256df44f16d0" args="(PhView *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhSceneManager::setView           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the current view. 
<p>
Sets the current view to the given view. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>a pointer to the new view </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8f0c03d5168ca97f1e63cfcd230fc64a" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhView.htm" title="View class.">phoenix::PhView</a> </dd></dl>

<p>References <a class="el" href="PhSceneManager_8h-source.htm#l00102">defview</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="cfe2e0ad5a06fab6811d144468e53113"></a><!-- doxytag: member="phoenix::PhSceneManager::colhandle" ref="cfe2e0ad5a06fab6811d144468e53113" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#cfe2e0ad5a06fab6811d144468e53113">phoenix::PhSceneManager::colhandle</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pointer to the collision handler. 
<p>
This holds a pointer to phoenix::PhPolygonCollisionHanlder. When this is not null, the scene manager takes care of checking for collisions and does it after the pre-render sweep and before the render sweep. <dl class="see" compact><dt><b>See also:</b></dt><dd>phoenix::PhCollisionHandler, <a class="el" href="classphoenix_1_1PhSceneManager.htm#839a182f8233ea87b7bc799cb18a423c" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#f33804d294ca1939815f67857647a941" title="Sets a collision handler.">setCollisionHandler()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#1a17aa8826b67c7fb0aa1efe940be31c" title="Gets the collision handler.">getCollisionHandler()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00182">getCollisionHandler()</a>, and <a class="el" href="PhSceneManager_8h-source.htm#l00192">setCollisionHandler()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f8ba03b903d3b6aaee9a0b2715e977f0"></a><!-- doxytag: member="phoenix::PhSceneManager::defview" ref="f8ba03b903d3b6aaee9a0b2715e977f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhView.htm">PhView</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#f8ba03b903d3b6aaee9a0b2715e977f0">phoenix::PhSceneManager::defview</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The default view. 
<p>
A simple count of all the nodes, probably not needed. (Could use std::vector::size()) <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#8f0c03d5168ca97f1e63cfcd230fc64a" title="Gets the current view.">getView()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#dc6eab121e2e0a96f95a256df44f16d0" title="Sets the current view.">setView()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00227">getView()</a>, and <a class="el" href="PhSceneManager_8h-source.htm#l00235">setView()</a>.</p>

</div>
</div><p>
<a class="anchor" name="fbf158fa77a948ef0b1424e1f7d33b6e"></a><!-- doxytag: member="phoenix::PhSceneManager::lightenable" ref="fbf158fa77a948ef0b1424e1f7d33b6e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classphoenix_1_1PhSceneManager.htm#fbf158fa77a948ef0b1424e1f7d33b6e">phoenix::PhSceneManager::lightenable</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Lights enable. 
<p>
Enables or disables the lighting system. (default disabled). <dl class="see" compact><dt><b>See also:</b></dt><dd>enableLighting(), disableLighting() </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00213">getLightingEnabled()</a>, and <a class="el" href="PhSceneManager_8h-source.htm#l00219">setLightingEnabled()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9d2c646aef6f91f11c50d6ef8e280b88"></a><!-- doxytag: member="phoenix::PhSceneManager::lmgr" ref="9d2c646aef6f91f11c50d6ef8e280b88" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhLightManager.htm">PhLightManager</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#9d2c646aef6f91f11c50d6ef8e280b88">phoenix::PhSceneManager::lmgr</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pointer to the light manager. 
<p>
The scenemanager handles per-pixel lighting for us, and it needs a pointer. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#2c0d31faa525da30c3148f2b13800ce3" title="Get light manager.">getLightManager()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#ef50ec48045f7c3702043c4887349976" title="Set light manager.">setLightManager()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00199">getLightManager()</a>, and <a class="el" href="PhSceneManager_8h-source.htm#l00206">setLightManager()</a>.</p>

</div>
</div><p>
<a class="anchor" name="24f7b89f0cfef18e7603615d83e3e317"></a><!-- doxytag: member="phoenix::PhSceneManager::nodes" ref="24f7b89f0cfef18e7603615d83e3e317" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a>*&gt; <a class="el" href="classphoenix_1_1PhSceneManager.htm#24f7b89f0cfef18e7603615d83e3e317">phoenix::PhSceneManager::nodes</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Vector containing all the nodes. 
<p>
This is a vector that contains pointers to every node in the scene graph. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#cb4836ead100d43c2b71805d4e46b397" title="Adds a scene node to the list.">addNode()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#28243f5016e3d1196b39f6f173e8e60c" title="Removes a node from the list.">removeNode()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00141">addNode()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4cb1238942918df44f58d75024121bad"></a><!-- doxytag: member="phoenix::PhSceneManager::rendernodes" ref="4cb1238942918df44f58d75024121bad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classphoenix_1_1PhSceneNode.htm">PhSceneNode</a>*&gt; <a class="el" href="classphoenix_1_1PhSceneManager.htm#4cb1238942918df44f58d75024121bad">phoenix::PhSceneManager::rendernodes</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
List of nodes to be rendered. 
<p>
This is a list of all nodes that call <a class="el" href="classphoenix_1_1PhSceneManager.htm#c7b91ab2264395c1e39bd24f86a1ebe4" title="Register a node to be rendered.">registerForRendering()</a>, it is sorted and used to call <a class="el" href="classphoenix_1_1PhSceneNode.htm#dbc845e590cb208ee4aae79e407dc0a0" title="Render call.">phoenix::PhSceneNode::onRender()</a> in order. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#839a182f8233ea87b7bc799cb18a423c" title="Does one step for all the nodes.">drawAll()</a>, <a class="el" href="classphoenix_1_1PhSceneManager.htm#c7b91ab2264395c1e39bd24f86a1ebe4" title="Register a node to be rendered.">registerForRendering()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00158">registerForRendering()</a>.</p>

</div>
</div><p>
<a class="anchor" name="472ad6f8841ca6f3a692a56fafbe4e96"></a><!-- doxytag: member="phoenix::PhSceneManager::system" ref="472ad6f8841ca6f3a692a56fafbe4e96" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classphoenix_1_1PhRenderSystem.htm">PhRenderSystem</a>* <a class="el" href="classphoenix_1_1PhSceneManager.htm#472ad6f8841ca6f3a692a56fafbe4e96">phoenix::PhSceneManager::system</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pointer to <a class="el" href="classphoenix_1_1PhRenderSystem.htm" title="The render system.">phoenix::PhRenderSystem</a>. 
<p>
Stores a pointer the render system used to draw all the nodes. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#03b2e6adf5d2585e0f3df00b9e1c02bc" title="Get render system call.">getRenderSystem()</a> </dd></dl>

<p>Referenced by <a class="el" href="PhSceneManager_8h-source.htm#l00134">getRenderSystem()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>svn/0.3/libPhoenixGL/<a class="el" href="PhSceneManager_8h-source.htm">PhSceneManager.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:38:29 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
