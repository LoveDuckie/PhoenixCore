<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: /home/jon/Desktop/Documents/workspace/Phoenix SVN/trunk/libPhoenixGL/PhParticleSystem.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.3 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li class="current"><a href="files.htm"><span>Files</span></a></li>
  </ul>
</div>
<h1>/home/jon/Desktop/Documents/workspace/Phoenix SVN/trunk/libPhoenixGL/PhParticleSystem.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2007, Jonathan Wayne Parrott.</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the "Software"), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE.</span>
<a name="l00022"></a>00022 <span class="comment"></span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef PHOENIXPPS</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define PHOENIXPPS</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include "PhSceneManager.h"</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>phoenix
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032 
<a name="l00034"></a>00034 <span class="comment">// Particle container, constains information for each particle in the system</span>
<a name="l00036"></a>00036 <span class="comment"></span>
<a name="l00037"></a>00037 <span class="keyword">struct </span>PhParticle
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039     <span class="keywordtype">int</span> x,y,hspeed,vspeed,lifeleft;
<a name="l00040"></a>00040     <span class="keywordtype">float</span> rot,rotspeed,scale;
<a name="l00041"></a>00041 };
<a name="l00042"></a>00042 
<a name="l00046"></a>00046 
<a name="l00048"></a>00048 <span class="comment">// Particle Type container, determines the properties particles will have when</span>
<a name="l00049"></a>00049 <span class="comment">// created</span>
<a name="l00051"></a>00051 <span class="comment"></span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="keyword">struct </span>PhParticleType
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056     <span class="keywordtype">int</span> maxlife, minlife, maxhs, maxvs, minhs, minvs, minalpha, minred, minblue, mingreen;
<a name="l00057"></a>00057     <span class="keywordtype">float</span> minrs, maxrs, minscale, maxscale;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 };
<a name="l00060"></a>00060 
<a name="l00064"></a>00064 
<a name="l00066"></a>00066 <span class="comment">// Emitter Definition</span>
<a name="l00068"></a>00068 <span class="comment"></span>
<a name="l00069"></a>00069 <span class="keyword">class </span>PhParticleEmitter : <span class="keyword">public</span> PhSceneNode
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="keyword">protected</span>:
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="comment">//max particles</span>
<a name="l00075"></a>00075     <span class="keywordtype">int</span> maxparts;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="comment">//particle type definition</span>
<a name="l00078"></a>00078     PhParticleType partype;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">//Image to be drawn</span>
<a name="l00081"></a>00081     PhTexture* image;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="comment">//Free on destory, it clears the image from memory when this is destroyed</span>
<a name="l00084"></a>00084     <span class="keywordtype">bool</span> fod;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="comment">//Pointers to the scenemanger and system.</span>
<a name="l00087"></a>00087     PhSceneManager* smgr;
<a name="l00088"></a>00088     PhRenderSystem* system;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="comment">//Vector to hold our particles</span>
<a name="l00091"></a>00091     std::vector&lt;PhParticle*&gt; particles;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="comment">//How many particles we have</span>
<a name="l00094"></a>00094     <span class="keywordtype">int</span> particlecount;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">//random function</span>
<a name="l00097"></a>00097     <span class="keyword">template</span> &lt;<span class="keyword">class</span> a_type&gt; a_type <a class="code" href="namespacephoenix_1_1aux.htm#319bc9690f578aaec2f9af9b9459efd3" title="Random function.">random</a>(a_type low,a_type high)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         <span class="keywordflow">return</span> (a_type(rand()) % (high - low + a_type(1)) + low);
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="keyword">public</span>:
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     <span class="comment">//construct and destruct</span>
<a name="l00105"></a>00105     PhParticleEmitter(PhSceneManager* s, PhTexture* i, PhParticleType pt, <span class="keywordtype">int</span> p = 1, <span class="keywordtype">float</span> d=0.0f, <span class="keywordtype">bool</span> c=<span class="keyword">true</span>);
<a name="l00106"></a>00106     ~PhParticleEmitter();
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="comment">//set the system it belongs too (shold only be set by scenemanager)</span>
<a name="l00109"></a>00109     <span class="keywordtype">void</span> setRenderSystem(PhRenderSystem* sys);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="comment">//get particles</span>
<a name="l00112"></a>00112     <span class="keywordtype">int</span> getParticles();
<a name="l00113"></a>00113     <span class="keywordtype">int</span> getMaxParticles();
<a name="l00114"></a>00114     <span class="keywordtype">void</span> setMaxParticles(<span class="keywordtype">int</span>);
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     <span class="comment">//functions for taking   care of particles</span>
<a name="l00117"></a>00117     PhParticle* getParticle(<span class="keywordtype">int</span>);
<a name="l00118"></a>00118     <span class="keywordtype">void</span> deleteParticle(<span class="keywordtype">int</span>);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     <span class="comment">//Following functions set and get the properties of the particle type definition</span>
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="comment">//set and get max  and min hspeed and vspeed</span>
<a name="l00123"></a>00123     <span class="keywordtype">int</span> getMaxHSpeed (<span class="keywordtype">void</span>);
<a name="l00124"></a>00124     <span class="keywordtype">int</span> getMaxVSpeed (<span class="keywordtype">void</span>);
<a name="l00125"></a>00125     <span class="keywordtype">void</span> setMaxHSpeed(<span class="keywordtype">int</span> a);
<a name="l00126"></a>00126     <span class="keywordtype">void</span> setMaxVSpeed(<span class="keywordtype">int</span> a);
<a name="l00127"></a>00127     <span class="keywordtype">int</span> getMinHSpeed (<span class="keywordtype">void</span>);
<a name="l00128"></a>00128     <span class="keywordtype">int</span> getMinVSpeed (<span class="keywordtype">void</span>);
<a name="l00129"></a>00129     <span class="keywordtype">void</span> setMinHSpeed(<span class="keywordtype">int</span> a);
<a name="l00130"></a>00130     <span class="keywordtype">void</span> setMinVSpeed(<span class="keywordtype">int</span> a);
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     <span class="comment">//set and get max and minlife</span>
<a name="l00133"></a>00133     <span class="keywordtype">int</span> getMaxLife();
<a name="l00134"></a>00134     <span class="keywordtype">void</span> setMaxLife(<span class="keywordtype">int</span>);
<a name="l00135"></a>00135     <span class="keywordtype">int</span> getMinLife();
<a name="l00136"></a>00136     <span class="keywordtype">void</span> setMinLife(<span class="keywordtype">int</span>);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">//set and get max and min rotation speed</span>
<a name="l00139"></a>00139     <span class="keywordtype">float</span> getMaxRotationSpeed();
<a name="l00140"></a>00140     <span class="keywordtype">void</span> setMaxRotationSpeed(<span class="keywordtype">float</span> a);
<a name="l00141"></a>00141     <span class="keywordtype">float</span> getMinRotationSpeed();
<a name="l00142"></a>00142     <span class="keywordtype">void</span> setMinRotationSpeed(<span class="keywordtype">float</span> a);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">//set and get the max color stuff</span>
<a name="l00145"></a>00145     <span class="keywordtype">void</span> setMinAlpha(<span class="keywordtype">int</span> a);
<a name="l00146"></a>00146     <span class="keywordtype">void</span> setMinRed(<span class="keywordtype">int</span> a);
<a name="l00147"></a>00147     <span class="keywordtype">void</span> setMinGreen(<span class="keywordtype">int</span> a);
<a name="l00148"></a>00148     <span class="keywordtype">void</span> setMinBlue(<span class="keywordtype">int</span> a);
<a name="l00149"></a>00149     <span class="keywordtype">int</span> getMinAlpha();
<a name="l00150"></a>00150     <span class="keywordtype">int</span> getMinRed();
<a name="l00151"></a>00151     <span class="keywordtype">int</span> getMinGreen();
<a name="l00152"></a>00152     <span class="keywordtype">int</span> getMinBlue();
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="comment">//set and get the max and min scale</span>
<a name="l00155"></a>00155     <span class="keywordtype">void</span> setMaxScale(<span class="keywordtype">float</span> a);
<a name="l00156"></a>00156     <span class="keywordtype">void</span> setMinScale(<span class="keywordtype">float</span> a);
<a name="l00157"></a>00157     <span class="keywordtype">float</span> getMaxScale();
<a name="l00158"></a>00158     <span class="keywordtype">float</span> getMinScale();
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">//set and get image</span>
<a name="l00161"></a>00161     <span class="keywordtype">bool</span> setTexture(PhTexture* img);
<a name="l00162"></a>00162     PhTexture* getTexture();
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="comment">//set Free on Destory</span>
<a name="l00165"></a>00165     <span class="keywordtype">void</span> setFod(<span class="keywordtype">bool</span> a);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="comment">//Obviously, these should be definted by the emitter types</span>
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="comment">//PreRender function (Should only be called by scene manager)</span>
<a name="l00170"></a>00170     <span class="keywordtype">void</span> onPreRender()
<a name="l00171"></a>00171     {}
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="comment">//Render function (should only be called by scene manager)</span>
<a name="l00174"></a>00174     <span class="keywordtype">void</span> onRender()
<a name="l00175"></a>00175     {}
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="comment">//Postrender (should only be called by scene manager)</span>
<a name="l00178"></a>00178     <span class="keywordtype">void</span> onPostRender()
<a name="l00179"></a>00179     {}
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 };
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00187"></a>00187 
<a name="l00189"></a>00189 <span class="comment">//This is the effector definition</span>
<a name="l00191"></a>00191 <span class="comment"></span>
<a name="l00192"></a>00192 <span class="keyword">class </span>PhParticleEffector : <span class="keyword">public</span> PhSceneNode
<a name="l00193"></a>00193 {
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="keyword">protected</span>:
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="comment">//Particle Emitter we're effecting</span>
<a name="l00198"></a>00198     PhParticleEmitter* emitter;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200     <span class="comment">//Scenemanager</span>
<a name="l00201"></a>00201     PhSceneManager* smgr;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="keyword">public</span>:
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     PhParticleEffector(PhSceneManager*, PhParticleEmitter*);
<a name="l00206"></a>00206     ~PhParticleEffector();
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onPreRender()
<a name="l00209"></a>00209     {}
<a name="l00210"></a>00210     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onRender()
<a name="l00211"></a>00211     {}
<a name="l00212"></a>00212     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onPostRender()
<a name="l00213"></a>00213     {}
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 };
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00222"></a>00222 
<a name="l00224"></a>00224 <span class="comment">// NOTE TO SELF: Put gun to head, and pull trigger before programming a particle</span>
<a name="l00225"></a>00225 <span class="comment">// system ever again.</span>
<a name="l00227"></a>00227 <span class="comment"></span>
<a name="l00228"></a>00228 <span class="preprocessor">#endif</span>
</pre></div><hr size="1"><address style="text-align: right;"><small>Generated on Mon Jan 28 19:50:05 2008 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.3 </small></address>
</body>
</html>
