<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: /home/jon/Desktop/Documents/workspace/Phoenix SVN/trunk/libPhoenixGL/PhPolygonCollision.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.3 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li class="current"><a href="files.htm"><span>Files</span></a></li>
  </ul>
</div>
<h1>/home/jon/Desktop/Documents/workspace/Phoenix SVN/trunk/libPhoenixGL/PhPolygonCollision.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2007, Jonathan Wayne Parrott.</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the "Software"), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE.</span>
<a name="l00022"></a>00022 <span class="comment"></span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef PHOENIXPOLYC</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define PHOENIXPOLYC</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include "PhPolygon.h"</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include "PhPolygonCollisionObject.h"</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;boost/bind.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;boost/function.hpp&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>std;
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>boost;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>phoenix
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040     <span class="keyword">struct </span>PhStaticGeometry;
<a name="l00041"></a>00041 
<a name="l00043"></a>00043 
<a name="l00047"></a><a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm">00047</a>     <span class="keyword">class </span><a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">PhPolygonCollisionHandler</a>
<a name="l00048"></a>00048     {
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     <span class="keyword">protected</span>:
<a name="l00051"></a>00051 
<a name="l00053"></a>00053 
<a name="l00057"></a><a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#c62b4a6d2043e308299d25f91720f248">00057</a>         vector&lt;PhCollisionObject*&gt; <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#c62b4a6d2043e308299d25f91720f248" title="List of collision objects.">colobjs</a>;
<a name="l00058"></a>00058 
<a name="l00060"></a>00060 
<a name="l00064"></a><a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d601bb23995d10bf4a8eaeeb246f5e45">00064</a>         vector&lt;PhStaticGeometry&gt; <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d601bb23995d10bf4a8eaeeb246f5e45" title="List of static geometry.">level</a>;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         <span class="keywordtype">void</span> GetInterval(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> P, <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>&amp; xAxis, <span class="keywordtype">float</span>&amp; min, <span class="keywordtype">float</span>&amp; max);
<a name="l00067"></a>00067         <span class="keywordtype">bool</span> FindMTD(vector&lt;PhVector2d&gt;* xAxis, vector&lt;float&gt;* taxis, <span class="keywordtype">int</span> iNumAxes, <a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>&amp; N, <span class="keywordtype">float</span>&amp; t);
<a name="l00068"></a>00068         <span class="keywordtype">bool</span> IntervalIntersect(<span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> A, <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> B, <span class="keyword">const</span> <a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>&amp; xAxis, <span class="keywordtype">float</span>&amp; taxis);
<a name="l00069"></a>00069         <span class="keywordtype">bool</span> PolygonCollision(<a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> A, <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> B,<a class="code" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>&amp; N,<span class="keywordtype">float</span>&amp; t);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="keyword">public</span>:
<a name="l00072"></a>00072 
<a name="l00074"></a>00074         <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#3f89a846226a998bc79ab6e15e81b190" title="Construct.">PhPolygonCollisionHandler</a>();
<a name="l00075"></a>00075 
<a name="l00077"></a>00077         <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#e37619e7163b231030bce92f7c78376a" title="Destruct.">~PhPolygonCollisionHandler</a>();
<a name="l00078"></a>00078 
<a name="l00080"></a>00080 
<a name="l00087"></a>00087         <a class="code" href="structphoenix_1_1PhCollisionData.htm" title="Collision data.">PhCollisionData</a> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15" title="Is colliding (polygon to polygon).">isColliding</a>(<a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> A, <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> B);
<a name="l00088"></a>00088 
<a name="l00090"></a>00090 
<a name="l00096"></a>00096         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d50b7553a24c7beb37b73fb2c1585ae5" title="Test static collisions.">testObjectCollidingStatic</a>(<a class="code" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">PhCollisionObject</a>* A);
<a name="l00097"></a>00097 
<a name="l00099"></a>00099 
<a name="l00104"></a>00104         <span class="keywordtype">bool</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15" title="Is colliding (polygon to polygon).">isColliding</a>(<a class="code" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">PhCollisionObject</a>* A, <a class="code" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">PhCollisionObject</a>* B);
<a name="l00105"></a>00105 
<a name="l00107"></a>00107 
<a name="l00113"></a>00113         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">testCollisions</a>();
<a name="l00114"></a>00114 
<a name="l00116"></a>00116 
<a name="l00120"></a>00120         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#be8702aa719ad5b711a3416a0cf69158" title="Add object.">addObject</a>(<a class="code" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">PhCollisionObject</a>* a);
<a name="l00121"></a>00121 
<a name="l00123"></a>00123 
<a name="l00127"></a>00127         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#1b3cc3ea86aab5d3d6556596e81c1d34" title="Remove object.">removeObject</a>(<a class="code" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">PhCollisionObject</a>* a);
<a name="l00128"></a>00128 
<a name="l00130"></a>00130 
<a name="l00137"></a>00137         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#93330ba6be42cac9d090a0fb1f4f66a6" title="Add static geometry.">addStaticGeometry</a>(<a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> p, <span class="keywordtype">int</span> t = 1);
<a name="l00138"></a>00138 
<a name="l00140"></a>00140 
<a name="l00144"></a>00144         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#93330ba6be42cac9d090a0fb1f4f66a6" title="Add static geometry.">addStaticGeometry</a>(<a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a> g);
<a name="l00145"></a>00145 
<a name="l00147"></a>00147 
<a name="l00151"></a>00151         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#baa4ecd0264df98c4280fcc54633d04d" title="Remove static geometry.">removeStaticGeometry</a>(<a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a> g);
<a name="l00152"></a>00152 
<a name="l00154"></a>00154 
<a name="l00159"></a>00159         vector&lt;PhStaticGeometry&gt; <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#2aee224c6e6dc43912bcbcc403f56813" title="Get static geometry.">getStaticGeometry</a>();
<a name="l00160"></a>00160 
<a name="l00162"></a>00162 
<a name="l00165"></a>00165         <span class="keywordtype">void</span> <a class="code" href="classphoenix_1_1PhPolygonCollisionHandler.htm#401ec582367346e05fb56e578367d27f" title="Clear static geometry.">clearStaticGeometry</a>();
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     };
<a name="l00168"></a>00168 
<a name="l00170"></a>00170 
<a name="l00176"></a><a class="code" href="structphoenix_1_1PhStaticGeometry.htm">00176</a>     <span class="keyword">struct </span><a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a>
<a name="l00177"></a>00177     {
<a name="l00178"></a>00178 
<a name="l00180"></a><a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786">00180</a>         <a class="code" href="classphoenix_1_1PhPolygon.htm" title="Polygon class.">PhPolygon</a> <a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786" title="Polygon.">polygon</a>;
<a name="l00181"></a>00181 
<a name="l00183"></a><a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c">00183</a>         <span class="keywordtype">int</span> <a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c" title="Type.">type</a>;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a> operator= (<span class="keyword">const</span> <a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a> other)
<a name="l00186"></a>00186         {
<a name="l00187"></a>00187             <a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786" title="Polygon.">polygon</a> = other.<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786" title="Polygon.">polygon</a>;
<a name="l00188"></a>00188             <a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c" title="Type.">type</a> = other.<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c" title="Type.">type</a>;
<a name="l00189"></a>00189             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192         <span class="keywordtype">bool</span> operator== (<a class="code" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">PhStaticGeometry</a> other)
<a name="l00193"></a>00193         {
<a name="l00194"></a>00194             <span class="keywordflow">if</span> (((other.<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786" title="Polygon.">polygon</a>)==<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#1ba29ad740bad7db4d74271fd8d01786" title="Polygon.">polygon</a>)&amp;&amp;(other.<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c" title="Type.">type</a>==<a class="code" href="structphoenix_1_1PhStaticGeometry.htm#f687776b9cb41b99c5c36391ddb2886c" title="Type.">type</a>))
<a name="l00195"></a>00195             {
<a name="l00196"></a>00196                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00197"></a>00197             }
<a name="l00198"></a>00198             <span class="keywordflow">else</span>
<a name="l00199"></a>00199             {
<a name="l00200"></a>00200                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00201"></a>00201             }
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203     };
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="preprocessor">#endif</span>
</pre></div><hr size="1"><address style="text-align: right;"><small>Generated on Mon Jan 28 19:50:05 2008 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.3 </small></address>
</body>
</html>
