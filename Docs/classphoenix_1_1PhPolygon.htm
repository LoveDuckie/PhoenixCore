<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhPolygon Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhPolygon Class Reference</h1><!-- doxytag: class="phoenix::PhPolygon" -->Polygon class.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhPolygon_8h-source.htm">svn/0.3/libPhoenixGL/PhPolygon.h</a>&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhPolygon-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="505a51d10ad11e395270166094213f52"></a><!-- doxytag: member="phoenix::PhPolygon::PhPolygon" ref="505a51d10ad11e395270166094213f52" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#505a51d10ad11e395270166094213f52">PhPolygon</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#d8f4fe3e7f03bd69ddc56e83bfa99b78">PhPolygon</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#d8f4fe3e7f03bd69ddc56e83bfa99b78"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#ee234a9b49947f905ffcb5d983314364">PhPolygon</a> (const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implict conversion from <a class="el" href="classphoenix_1_1PhRect.htm" title="Rectangle class.">PhRect</a>.  <a href="#ee234a9b49947f905ffcb5d983314364"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c78ab77df131f1c1a583b8c7d534e900"></a><!-- doxytag: member="phoenix::PhPolygon::~PhPolygon" ref="c78ab77df131f1c1a583b8c7d534e900" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#c78ab77df131f1c1a583b8c7d534e900">~PhPolygon</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#1b4e69def70d0e851c4a4bfa1b899f29">clear</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear.  <a href="#1b4e69def70d0e851c4a4bfa1b899f29"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#f304b404741f778c7a0973f25bb246b3">getPosition</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get position.  <a href="#f304b404741f778c7a0973f25bb246b3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#5ebdf47c19f80f7d689de27f76655978">setPosition</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set position.  <a href="#5ebdf47c19f80f7d689de27f76655978"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#9a71bf1e90daf35d470f55574d761377">addVertex</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add vertex.  <a href="#9a71bf1e90daf35d470f55574d761377"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#8e14867d07f5ddcf09b237e7f031b7ca">addPoint</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add point.  <a href="#8e14867d07f5ddcf09b237e7f031b7ca"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#893d94f3c5fa9d74a57e9b3bcc6a68ed">getVertexCount</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get vertex count.  <a href="#893d94f3c5fa9d74a57e9b3bcc6a68ed"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#0106198c6686c868511fea028bfec493">getVertex</a> (const unsigned int &amp;a) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get vertex.  <a href="#0106198c6686c868511fea028bfec493"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#4eac6dc63bb1032fe1d12885e23a818d">setVertex</a> (const unsigned int &amp;a, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set vertex.  <a href="#4eac6dc63bb1032fe1d12885e23a818d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#c4fa0df0db8d1bd94e00429bb0d391f6">getRadius</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get radius.  <a href="#c4fa0df0db8d1bd94e00429bb0d391f6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#a336e76bb15ad206bf44e2dcfdf5b037">rotate</a> (const float &amp;rad)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate.  <a href="#a336e76bb15ad206bf44e2dcfdf5b037"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#d59913a72734aefa45179d063a73d077">rotate</a> (const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate (Matrix).  <a href="#d59913a72734aefa45179d063a73d077"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygon.htm#f8b8c6fe178b8297687a7f1e922c0f6d">operator[]</a> (const unsigned int &amp;a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Array operator.  <a href="#f8b8c6fe178b8297687a7f1e922c0f6d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6581aa4f10c5767846713e3f37b4c402"></a><!-- doxytag: member="phoenix::PhPolygon::operator*" ref="6581aa4f10c5767846713e3f37b4c402" args="(const float &amp;scalar) const " -->
const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*</b> (const float &amp;scalar) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5bf9cf67effe488cbbc3a860bbd09bff"></a><!-- doxytag: member="phoenix::PhPolygon::operator*=" ref="5bf9cf67effe488cbbc3a860bbd09bff" args="(const float &amp;scalar)" -->
const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (const float &amp;scalar)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="40705d3d0915a7d17ab1fdba348f1f50"></a><!-- doxytag: member="phoenix::PhPolygon::operator*" ref="40705d3d0915a7d17ab1fdba348f1f50" args="(const PhRotationMatrix &amp;other) const " -->
const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*</b> (const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;other) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5735086c15619aa9fb3d78325e16379d"></a><!-- doxytag: member="phoenix::PhPolygon::operator*=" ref="5735086c15619aa9fb3d78325e16379d" args="(const PhRotationMatrix &amp;other)" -->
const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;other)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="eb2774ce7825e209cad13de7359682d6"></a><!-- doxytag: member="phoenix::PhPolygon::operator=" ref="eb2774ce7825e209cad13de7359682d6" args="(const PhPolygon &amp;other)" -->
const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;other)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="eeb06f984ccd6a8676f428c6b756b93d"></a><!-- doxytag: member="phoenix::PhPolygon::operator==" ref="eeb06f984ccd6a8676f428c6b756b93d" args="(const PhPolygon &amp;other) const " -->
const bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> &amp;other) const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Polygon class. 
<p>
This class represents polygons for drawing and collision detection. A polygon is basically any geometric object that can be represented by a triangle fan. Polygons are constructed with vertices, vertices can be defined as a vector from the center of the polygon or a vector from world coordinates. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm" title="The polygon collision handler.">phoenix::PhPolygonCollisionHandler</a> </dd></dl>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="d8f4fe3e7f03bd69ddc56e83bfa99b78"></a><!-- doxytag: member="phoenix::PhPolygon::PhPolygon" ref="d8f4fe3e7f03bd69ddc56e83bfa99b78" args="(const PhVector2d &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhPolygon::PhPolygon           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Vector representing the center (position) of the polygon. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="ee234a9b49947f905ffcb5d983314364"></a><!-- doxytag: member="phoenix::PhPolygon::PhPolygon" ref="ee234a9b49947f905ffcb5d983314364" args="(const PhRect &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">phoenix::PhPolygon::PhPolygon           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhRect.htm">PhRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Implict conversion from <a class="el" href="classphoenix_1_1PhRect.htm" title="Rectangle class.">PhRect</a>. 
<p>
This constructor makes a polygon from the given rectangle. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="8e14867d07f5ddcf09b237e7f031b7ca"></a><!-- doxytag: member="phoenix::PhPolygon::addPoint" ref="8e14867d07f5ddcf09b237e7f031b7ca" args="(const PhVector2d &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::addPoint           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add point. 
<p>
Adds a point to the polygon by making a vertex based on the position of the point and the center point of the polygon. Add point does care about where the polygon is: it takes the vector between our position and where the point is and puts it onto the polygon. Basically, it translates world coordiates to polygon coordinates. <dl class="note" compact><dt><b>Note:</b></dt><dd>This function does not sort the verticles by angle. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Point to add. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygon.htm#9a71bf1e90daf35d470f55574d761377" title="Add vertex.">addVertex()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="9a71bf1e90daf35d470f55574d761377"></a><!-- doxytag: member="phoenix::PhPolygon::addVertex" ref="9a71bf1e90daf35d470f55574d761377" args="(const PhVector2d &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::addVertex           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add vertex. 
<p>
Adds a vertex to the polygon. It doesn't take into account the position of the polygon, so <a class="el" href="classphoenix_1_1PhVector2d.htm" title="2D Vector class">PhVector2d</a>(0.0f,10.0f) would push an vector that's 10 units above the polygon's center. <dl class="note" compact><dt><b>Note:</b></dt><dd>This function does not sort the verticles by angle. </dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>Vertex to add. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygon.htm#8e14867d07f5ddcf09b237e7f031b7ca" title="Add point.">addPoint()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="1b4e69def70d0e851c4a4bfa1b899f29"></a><!-- doxytag: member="phoenix::PhPolygon::clear" ref="1b4e69def70d0e851c4a4bfa1b899f29" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::clear           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear. 
<p>
Removes all the vertices from the polygon. 
</div>
</div><p>
<a class="anchor" name="f304b404741f778c7a0973f25bb246b3"></a><!-- doxytag: member="phoenix::PhPolygon::getPosition" ref="f304b404741f778c7a0973f25bb246b3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhPolygon::getPosition           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get position. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The center of the polygon (The position). </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygon.htm#5ebdf47c19f80f7d689de27f76655978" title="Set position.">setPosition()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="c4fa0df0db8d1bd94e00429bb0d391f6"></a><!-- doxytag: member="phoenix::PhPolygon::getRadius" ref="c4fa0df0db8d1bd94e00429bb0d391f6" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float&amp; phoenix::PhPolygon::getRadius           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get radius. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The magnitude of the largest vertex in the polygon. </dd></dl>

</div>
</div><p>
<a class="anchor" name="0106198c6686c868511fea028bfec493"></a><!-- doxytag: member="phoenix::PhPolygon::getVertex" ref="0106198c6686c868511fea028bfec493" args="(const unsigned int &amp;a) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhPolygon::getVertex           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get vertex. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The index of the vertex wanted. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The vertex at index a. </dd></dl>

<p>Referenced by <a class="el" href="PhPolygon_8h-source.htm#l00188">operator[]()</a>.</p>

</div>
</div><p>
<a class="anchor" name="893d94f3c5fa9d74a57e9b3bcc6a68ed"></a><!-- doxytag: member="phoenix::PhPolygon::getVertexCount" ref="893d94f3c5fa9d74a57e9b3bcc6a68ed" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int phoenix::PhPolygon::getVertexCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get vertex count. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The current number of vertices in the polygon. </dd></dl>

</div>
</div><p>
<a class="anchor" name="f8b8c6fe178b8297687a7f1e922c0f6d"></a><!-- doxytag: member="phoenix::PhPolygon::operator[]" ref="f8b8c6fe178b8297687a7f1e922c0f6d" args="(const unsigned int &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhPolygon::operator[]           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Array operator. 
<p>
This allows you to treat the polygon like a const array of vectors. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The index wanted. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A vector representing the vertex at the given index. </dd></dl>

<p>References <a class="el" href="PhPolygon_8h-source.htm#l00136">getVertex()</a>.</p>

</div>
</div><p>
<a class="anchor" name="d59913a72734aefa45179d063a73d077"></a><!-- doxytag: member="phoenix::PhPolygon::rotate" ref="d59913a72734aefa45179d063a73d077" args="(const PhRotationMatrix &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::rotate           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate (Matrix). 
<p>
Rotates the polygon by the given matrix. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The matrix. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a336e76bb15ad206bf44e2dcfdf5b037"></a><!-- doxytag: member="phoenix::PhPolygon::rotate" ref="a336e76bb15ad206bf44e2dcfdf5b037" args="(const float &amp;rad)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::rotate           </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>rad</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate. 
<p>
Rotates the polygon by the given measurement. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rad</em>&nbsp;</td><td>Angle measurement in Radians. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="5ebdf47c19f80f7d689de27f76655978"></a><!-- doxytag: member="phoenix::PhPolygon::setPosition" ref="5ebdf47c19f80f7d689de27f76655978" args="(const PhVector2d &amp;a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::setPosition           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set position. 
<p>
Sets the center (position) of the polygon. Note that the vertices are relative to the center of the polygon, therefore changing this value will not effect the shape of the polygon. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The new center of the polygon. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygon.htm#f304b404741f778c7a0973f25bb246b3" title="Get position.">getPosition()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="4eac6dc63bb1032fe1d12885e23a818d"></a><!-- doxytag: member="phoenix::PhPolygon::setVertex" ref="4eac6dc63bb1032fe1d12885e23a818d" args="(const unsigned int &amp;a, const PhVector2d &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygon::setVertex           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set vertex. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The index of the vertex to set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>What to set it to. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>svn/0.3/libPhoenixGL/<a class="el" href="PhPolygon_8h-source.htm">PhPolygon.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:42:33 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
