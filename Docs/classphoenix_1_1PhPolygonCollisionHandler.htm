<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhPolygonCollisionHandler Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm">PhPolygonCollisionHandler</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhPolygonCollisionHandler Class Reference</h1><!-- doxytag: class="phoenix::PhPolygonCollisionHandler" -->The polygon collision handler.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhPolygonCollision_8h-source.htm">PhPolygonCollision.h</a>&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhPolygonCollisionHandler-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3f89a846226a998bc79ab6e15e81b190"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::PhPolygonCollisionHandler" ref="3f89a846226a998bc79ab6e15e81b190" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#3f89a846226a998bc79ab6e15e81b190">PhPolygonCollisionHandler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="e37619e7163b231030bce92f7c78376a"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::~PhPolygonCollisionHandler" ref="e37619e7163b231030bce92f7c78376a" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#e37619e7163b231030bce92f7c78376a">~PhPolygonCollisionHandler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destruct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structphoenix_1_1PhCollisionData.htm">PhCollisionData</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15">isColliding</a> (<a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> A, <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> B)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is colliding (polygon to polygon).  <a href="#740f81298729bda1f4d665e6c0d1eb15"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d50b7553a24c7beb37b73fb2c1585ae5">testObjectCollidingStatic</a> (<a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *A)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Test static collisions.  <a href="#d50b7553a24c7beb37b73fb2c1585ae5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#c412abbe15db9da27e7f3f504888dce6">isColliding</a> (<a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *A, <a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *B)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is colliding (object to object).  <a href="#c412abbe15db9da27e7f3f504888dce6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3">testCollisions</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Test collisions.  <a href="#b3d38b45f4e359eb28d2516f94f047f3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#be8702aa719ad5b711a3416a0cf69158">addObject</a> (<a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add object.  <a href="#be8702aa719ad5b711a3416a0cf69158"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#1b3cc3ea86aab5d3d6556596e81c1d34">removeObject</a> (<a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *a)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove object.  <a href="#1b3cc3ea86aab5d3d6556596e81c1d34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#93330ba6be42cac9d090a0fb1f4f66a6">addStaticGeometry</a> (<a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> p, int t=1)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add static geometry.  <a href="#93330ba6be42cac9d090a0fb1f4f66a6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b6bf447076414402c6201cf1f08f4fdc">addStaticGeometry</a> (<a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a> g)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add static geometry.  <a href="#b6bf447076414402c6201cf1f08f4fdc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#baa4ecd0264df98c4280fcc54633d04d">removeStaticGeometry</a> (<a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a> g)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove static geometry.  <a href="#baa4ecd0264df98c4280fcc54633d04d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">vector&lt; <a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#2aee224c6e6dc43912bcbcc403f56813">getStaticGeometry</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get static geometry.  <a href="#2aee224c6e6dc43912bcbcc403f56813"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#401ec582367346e05fb56e578367d27f">clearStaticGeometry</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear static geometry.  <a href="#401ec582367346e05fb56e578367d27f"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f441cec942ee5eacbc8f627237051ee6"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::GetInterval" ref="f441cec942ee5eacbc8f627237051ee6" args="(const PhPolygon P, const PhVector2d &amp;xAxis, float &amp;min, float &amp;max)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>GetInterval</b> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> P, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;xAxis, float &amp;min, float &amp;max)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="6eb96c385dcc6301d32a34e842f21b1a"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::FindMTD" ref="6eb96c385dcc6301d32a34e842f21b1a" args="(vector&lt; PhVector2d &gt; *xAxis, vector&lt; float &gt; *taxis, int iNumAxes, PhVector2d &amp;N, float &amp;t)" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>FindMTD</b> (vector&lt; <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &gt; *xAxis, vector&lt; float &gt; *taxis, int iNumAxes, <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;N, float &amp;t)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cbfb2d6ae1b532e11dfd453d6d62face"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::IntervalIntersect" ref="cbfb2d6ae1b532e11dfd453d6d62face" args="(const PhPolygon A, const PhPolygon B, const PhVector2d &amp;xAxis, float &amp;taxis)" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>IntervalIntersect</b> (const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> A, const <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> B, const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;xAxis, float &amp;taxis)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="eab7154dc40c31b6c6aa25cc5d95b5f3"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::PolygonCollision" ref="eab7154dc40c31b6c6aa25cc5d95b5f3" args="(PhPolygon A, PhPolygon B, PhVector2d &amp;N, float &amp;t)" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>PolygonCollision</b> (<a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> A, <a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a> B, <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;N, float &amp;t)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">vector&lt; <a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#c62b4a6d2043e308299d25f91720f248">colobjs</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">List of collision objects.  <a href="#c62b4a6d2043e308299d25f91720f248"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">vector&lt; <a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d601bb23995d10bf4a8eaeeb246f5e45">level</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">List of static geometry.  <a href="#d601bb23995d10bf4a8eaeeb246f5e45"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The polygon collision handler. 
<p>
Provides a simple and effective way to test for collisions using polygons and collision objects. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">phoenix::PhCollisionObject</a> </dd></dl>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="be8702aa719ad5b711a3416a0cf69158"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::addObject" ref="be8702aa719ad5b711a3416a0cf69158" args="(PhCollisionObject *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::addObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The object to be added to the list. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#1b3cc3ea86aab5d3d6556596e81c1d34" title="Remove object.">removeObject()</a>, <a class="el" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">phoenix::PhCollisionObject</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="b6bf447076414402c6201cf1f08f4fdc"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::addStaticGeometry" ref="b6bf447076414402c6201cf1f08f4fdc" args="(PhStaticGeometry g)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::addStaticGeometry           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a>&nbsp;</td>
          <td class="paramname"> <em>g</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add static geometry. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>g</em>&nbsp;</td><td>The static geometry to be added to the list. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#baa4ecd0264df98c4280fcc54633d04d" title="Remove static geometry.">removeStaticGeometry()</a>, <a class="el" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">phoenix::PhStaticGeometry</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="93330ba6be42cac9d090a0fb1f4f66a6"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::addStaticGeometry" ref="93330ba6be42cac9d090a0fb1f4f66a6" args="(PhPolygon p, int t=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::addStaticGeometry           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>t</em> = <code>1</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add static geometry. 
<p>
Adds static geometry given a polygon and a type. Usually a type of 1 is treated as a solid block and it is the default for this function. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>The polygon to be added as static geometry. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>t</em>&nbsp;</td><td>The type. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#baa4ecd0264df98c4280fcc54633d04d" title="Remove static geometry.">removeStaticGeometry()</a>, <a class="el" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">phoenix::PhStaticGeometry</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="401ec582367346e05fb56e578367d27f"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::clearStaticGeometry" ref="401ec582367346e05fb56e578367d27f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::clearStaticGeometry           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear static geometry. 
<p>
Removes all the static geometry from the list. 
</div>
</div><p>
<a class="anchor" name="2aee224c6e6dc43912bcbcc403f56813"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::getStaticGeometry" ref="2aee224c6e6dc43912bcbcc403f56813" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a>&gt; phoenix::PhPolygonCollisionHandler::getStaticGeometry           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get static geometry. 
<p>
This returns a list of all the static geometry. This can be used to draw all the static geometry if you really wanted to. <dl class="return" compact><dt><b>Returns:</b></dt><dd>a std::vector list of all the static geometry. </dd></dl>

</div>
</div><p>
<a class="anchor" name="c412abbe15db9da27e7f3f504888dce6"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::isColliding" ref="c412abbe15db9da27e7f3f504888dce6" args="(PhCollisionObject *A, PhCollisionObject *B)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool phoenix::PhPolygonCollisionHandler::isColliding           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>B</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Is colliding (object to object). 
<p>
Does collision testing between two objects, calls both callbacks for the objects. can be called directly, but this function is called by testObjectCollisions() if it used. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15" title="Is colliding (polygon to polygon).">isColliding()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">testCollisions()</a>, <a class="el" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">phoenix::PhCollisionObject</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="740f81298729bda1f4d665e6c0d1eb15"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::isColliding" ref="740f81298729bda1f4d665e6c0d1eb15" args="(PhPolygon A, PhPolygon B)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structphoenix_1_1PhCollisionData.htm">PhCollisionData</a> phoenix::PhPolygonCollisionHandler::isColliding           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>&nbsp;</td>
          <td class="paramname"> <em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhPolygon.htm">PhPolygon</a>&nbsp;</td>
          <td class="paramname"> <em>B</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Is colliding (polygon to polygon). 
<p>
polygon to polygon, can be called if you don't want to use collision objects or just want some simple tests. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>A</em>&nbsp;</td><td>The polygon to test. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>B</em>&nbsp;</td><td>The polygon to test against. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Collision data from this test. </dd></dl>

</div>
</div><p>
<a class="anchor" name="1b3cc3ea86aab5d3d6556596e81c1d34"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::removeObject" ref="1b3cc3ea86aab5d3d6556596e81c1d34" args="(PhCollisionObject *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::removeObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Remove object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>The object to be removed from the list. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#be8702aa719ad5b711a3416a0cf69158" title="Add object.">addObject()</a>, <a class="el" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">phoenix::PhCollisionObject</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="baa4ecd0264df98c4280fcc54633d04d"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::removeStaticGeometry" ref="baa4ecd0264df98c4280fcc54633d04d" args="(PhStaticGeometry g)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::removeStaticGeometry           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a>&nbsp;</td>
          <td class="paramname"> <em>g</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Remove static geometry. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>g</em>&nbsp;</td><td>The static geometry to be removed. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#93330ba6be42cac9d090a0fb1f4f66a6" title="Add static geometry.">addStaticGeometry()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#401ec582367346e05fb56e578367d27f" title="Clear static geometry.">clearStaticGeometry</a>, <a class="el" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">phoenix::PhStaticGeometry</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="b3d38b45f4e359eb28d2516f94f047f3"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::testCollisions" ref="b3d38b45f4e359eb28d2516f94f047f3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::testCollisions           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Test collisions. 
<p>
This is the main function of the collision manager. This goes through all the collision objects and tests them against each other and the list of static geometry. It does callbacks and if used in conjuction with the scenemanager can do it nearly transparently. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhSceneManager.htm#f33804d294ca1939815f67857647a941" title="Sets a collision handler.">phoenix::PhSceneManager::setCollisionHandler</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="d50b7553a24c7beb37b73fb2c1585ae5"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::testObjectCollidingStatic" ref="d50b7553a24c7beb37b73fb2c1585ae5" args="(PhCollisionObject *A)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void phoenix::PhPolygonCollisionHandler::testObjectCollidingStatic           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>A</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Test static collisions. 
<p>
Test a collision object against the static geometry and performs the object's callback. Can be called directly, but this function is called by testObjectCollisions() if it's used. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>A</em>&nbsp;</td><td>The object to test. </td></tr>
  </table>
</dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15" title="Is colliding (polygon to polygon).">isColliding()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">testCollisions()</a>, <a class="el" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">phoenix::PhStaticGeometry</a>, <a class="el" href="classphoenix_1_1PhCollisionObject.htm" title="Collision object.">phoenix::PhCollisionObject</a> </dd></dl>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="c62b4a6d2043e308299d25f91720f248"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::colobjs" ref="c62b4a6d2043e308299d25f91720f248" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="classphoenix_1_1PhCollisionObject.htm">PhCollisionObject</a>*&gt; <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#c62b4a6d2043e308299d25f91720f248">phoenix::PhPolygonCollisionHandler::colobjs</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
List of collision objects. 
<p>
A list of all collision objects for testing. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#be8702aa719ad5b711a3416a0cf69158" title="Add object.">addObject()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#1b3cc3ea86aab5d3d6556596e81c1d34" title="Remove object.">removeObject()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">testCollisions()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#740f81298729bda1f4d665e6c0d1eb15" title="Is colliding (polygon to polygon).">isColliding()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="d601bb23995d10bf4a8eaeeb246f5e45"></a><!-- doxytag: member="phoenix::PhPolygonCollisionHandler::level" ref="d601bb23995d10bf4a8eaeeb246f5e45" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="structphoenix_1_1PhStaticGeometry.htm">PhStaticGeometry</a>&gt; <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d601bb23995d10bf4a8eaeeb246f5e45">phoenix::PhPolygonCollisionHandler::level</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
List of static geometry. 
<p>
A list of static geometry used for testing. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="structphoenix_1_1PhStaticGeometry.htm" title="Static geomery.">phoenix::PhStaticGeometry</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#93330ba6be42cac9d090a0fb1f4f66a6" title="Add static geometry.">addStaticGeometry()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#baa4ecd0264df98c4280fcc54633d04d" title="Remove static geometry.">removeStaticGeometry()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#b3d38b45f4e359eb28d2516f94f047f3" title="Test collisions.">testCollisions()</a>, <a class="el" href="classphoenix_1_1PhPolygonCollisionHandler.htm#d50b7553a24c7beb37b73fb2c1585ae5" title="Test static collisions.">testObjectCollidingStatic()</a> </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>trunk/libPhoenixGL/<a class="el" href="PhPolygonCollision_8h-source.htm">PhPolygonCollision.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Nov 2 17:37:21 2008 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.7.1 </small></address>
</body>
</html>
