<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>PhoenixGL: phoenix::PhVector2d Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.8 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacephoenix.htm">phoenix</a>::<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>
  </div>
</div>
<div class="contents">
<h1>phoenix::PhVector2d Class Reference</h1><!-- doxytag: class="phoenix::PhVector2d" -->2D Vector class  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PhVector2d_8h-source.htm">svn/0.3/libPhoenixGL/PhVector2d.h</a>&gt;</code>
<p>

<p>
<a href="classphoenix_1_1PhVector2d-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="39f2408ccf595c66c6e3a84968ff7d60"></a><!-- doxytag: member="phoenix::PhVector2d::PhVector2d" ref="39f2408ccf595c66c6e3a84968ff7d60" args="(float a, float b)" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><b>PhVector2d</b> (float a, float b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="c0d9341de69ffca7832997aa6d617573"></a><!-- doxytag: member="phoenix::PhVector2d::getX" ref="c0d9341de69ffca7832997aa6d617573" args="() const " -->
const float&nbsp;</td><td class="memItemRight" valign="bottom"><b>getX</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="348b86258f12290e27a344b8cee92150"></a><!-- doxytag: member="phoenix::PhVector2d::getY" ref="348b86258f12290e27a344b8cee92150" args="() const " -->
const float&nbsp;</td><td class="memItemRight" valign="bottom"><b>getY</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0017dbb56514b7bcfc2cf948055edc7a"></a><!-- doxytag: member="phoenix::PhVector2d::setX" ref="0017dbb56514b7bcfc2cf948055edc7a" args="(const float &amp;a)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>setX</b> (const float &amp;a)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="612df0440af586c8cb9dcc0a77b757cc"></a><!-- doxytag: member="phoenix::PhVector2d::setY" ref="612df0440af586c8cb9dcc0a77b757cc" args="(const float &amp;b)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><b>setY</b> (const float &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f4bf259dc31d447aafa53e8f195417b1"></a><!-- doxytag: member="phoenix::PhVector2d::operator=" ref="f4bf259dc31d447aafa53e8f195417b1" args="(const PhVector2d &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="19943c604d0ff49009eacb7c9bbe0c1b"></a><!-- doxytag: member="phoenix::PhVector2d::operator+=" ref="19943c604d0ff49009eacb7c9bbe0c1b" args="(const PhVector2d &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b08c6664e7edf3ef340833da216b2ac3"></a><!-- doxytag: member="phoenix::PhVector2d::operator&#45;=" ref="b08c6664e7edf3ef340833da216b2ac3" args="(const PhVector2d &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5747f4e6aeccafcdf1f9dc9daa671db1"></a><!-- doxytag: member="phoenix::PhVector2d::operator+" ref="5747f4e6aeccafcdf1f9dc9daa671db1" args="(const PhVector2d &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator+</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7fee5371ab8b2cb16a27a33169e7a46a"></a><!-- doxytag: member="phoenix::PhVector2d::operator&#45;" ref="7fee5371ab8b2cb16a27a33169e7a46a" args="(const PhVector2d &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator-</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="32a8b961dc4ef02aaa0c0aadd8fb6c9f"></a><!-- doxytag: member="phoenix::PhVector2d::operator+" ref="32a8b961dc4ef02aaa0c0aadd8fb6c9f" args="(const float &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator+</b> (const float &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9adb405d854709ff6f8e0dfc7b9b8ae4"></a><!-- doxytag: member="phoenix::PhVector2d::operator&#45;" ref="9adb405d854709ff6f8e0dfc7b9b8ae4" args="(const float &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator-</b> (const float &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="48d72d2637225dc64aae78dbc7d1367c"></a><!-- doxytag: member="phoenix::PhVector2d::operator*" ref="48d72d2637225dc64aae78dbc7d1367c" args="(const float &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*</b> (const float &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7ef1997edfb0d0dc2c1cd44762cfb3db"></a><!-- doxytag: member="phoenix::PhVector2d::operator/" ref="7ef1997edfb0d0dc2c1cd44762cfb3db" args="(const float &amp;rvalue) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator/</b> (const float &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="bf3311f1abb39849216f8252321dcdd3"></a><!-- doxytag: member="phoenix::PhVector2d::operator+=" ref="bf3311f1abb39849216f8252321dcdd3" args="(const float &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const float &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a190271860f7d29db66ff3edda78e14f"></a><!-- doxytag: member="phoenix::PhVector2d::operator&#45;=" ref="a190271860f7d29db66ff3edda78e14f" args="(const float &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const float &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="531ec80d6e1ee9f07e684154b11d1ed6"></a><!-- doxytag: member="phoenix::PhVector2d::operator*=" ref="531ec80d6e1ee9f07e684154b11d1ed6" args="(const float &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (const float &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="055672c2055f6a8ec9997285a54a99aa"></a><!-- doxytag: member="phoenix::PhVector2d::operator/=" ref="055672c2055f6a8ec9997285a54a99aa" args="(const float &amp;rvalue)" -->
<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator/=</b> (const float &amp;rvalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7b0016b64b28267b002506388f732398"></a><!-- doxytag: member="phoenix::PhVector2d::operator&#45;" ref="7b0016b64b28267b002506388f732398" args="(void) const " -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator-</b> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cdf336f97eb49268a4ad0343f6eed0b7"></a><!-- doxytag: member="phoenix::PhVector2d::operator==" ref="cdf336f97eb49268a4ad0343f6eed0b7" args="(const PhVector2d &amp;rvalue) const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="1906e93f860876b8edb8146c90910190"></a><!-- doxytag: member="phoenix::PhVector2d::operator!=" ref="1906e93f860876b8edb8146c90910190" args="(const PhVector2d &amp;rvalue) const " -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4abc1d3b9595b429b867a0753048aa57"></a><!-- doxytag: member="phoenix::PhVector2d::operator*" ref="4abc1d3b9595b429b867a0753048aa57" args="(const PhVector2d &amp;rvalue) const " -->
const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#4abc1d3b9595b429b867a0753048aa57">operator*</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Dot Product. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="4ebbeb5cdb7194d5a78dbfa3eb8d2cfd"></a><!-- doxytag: member="phoenix::PhVector2d::operator^" ref="4ebbeb5cdb7194d5a78dbfa3eb8d2cfd" args="(const PhVector2d &amp;rvalue) const " -->
const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#4ebbeb5cdb7194d5a78dbfa3eb8d2cfd">operator^</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;rvalue) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Cross Product. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#8b1b88ca06bf7ad0e837cc9ae08c4f25">normalize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Normalization.  <a href="#8b1b88ca06bf7ad0e837cc9ae08c4f25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#3d5bac07b16660fc64d6696b5321d02a">getMagnitude</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Magnitude.  <a href="#3d5bac07b16660fc64d6696b5321d02a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#723764cc87db234b7ab3312a469d201d">getMagnitudeSquared</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Magnitude squared.  <a href="#723764cc87db234b7ab3312a469d201d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#cfa5b3c40471fc4f59a17b0aeb378c61">project</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;b)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Projection.  <a href="#cfa5b3c40471fc4f59a17b0aeb378c61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#20121f2f137be421b212f4c8bf91b49f">getDirection</a> (void) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Direction.  <a href="#20121f2f137be421b212f4c8bf91b49f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#8c6c7a5dedf95e747f90432244d57343">rotate</a> (const float &amp;angle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate.  <a href="#8c6c7a5dedf95e747f90432244d57343"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#bf4fa0bc70bd158129b8f8455f71d016">getAngle</a> (const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;xE=<a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f, 0)) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get angle.  <a href="#bf4fa0bc70bd158129b8f8455f71d016"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classphoenix_1_1PhVector2d.htm#afe73ebfc9d86f6a2da0218ae398fc31">operator*</a> (const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Matrix multiplication.  <a href="#afe73ebfc9d86f6a2da0218ae398fc31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="8200a7d395b085751ada1c767725f596"></a><!-- doxytag: member="phoenix::PhVector2d::operator*=" ref="8200a7d395b085751ada1c767725f596" args="(const PhRotationMatrix &amp;other)" -->
const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;other)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3fa2f58320c7ed5ee0d057073413b49a"></a><!-- doxytag: member="phoenix::PhVector2d::x" ref="3fa2f58320c7ed5ee0d057073413b49a" args="" -->
float&nbsp;</td><td class="memItemRight" valign="bottom"><b>x</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="35c0cb87d63024e7a5632c9962c715e7"></a><!-- doxytag: member="phoenix::PhVector2d::y" ref="35c0cb87d63024e7a5632c9962c715e7" args="" -->
float&nbsp;</td><td class="memItemRight" valign="bottom"><b>y</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
2D Vector class 
<p>
Provides a fast and efficient way to do vector math. <dl class="note" compact><dt><b>Note:</b></dt><dd>Only the ambigious operators are documented, the others (such as +, -, +=, etc.) are considered obvious and therefore not documented. </dd></dl>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="bf4fa0bc70bd158129b8f8455f71d016"></a><!-- doxytag: member="phoenix::PhVector2d::getAngle" ref="bf4fa0bc70bd158129b8f8455f71d016" args="(const PhVector2d &amp;xE=PhVector2d(1.0f, 0)) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float phoenix::PhVector2d::getAngle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>xE</em> = <code><a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>(1.0f,&nbsp;0)</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get angle. 
<p>
Get the angle measure of the vector relative to the reference vector given. By defualt this is &lt;1,0&gt; but it can be changed. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>xE</em>&nbsp;</td><td>The reference vector, by defualt this is &lt;1,0&gt; </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The angle between the reference vector and this vector. </dd></dl>

</div>
</div><p>
<a class="anchor" name="20121f2f137be421b212f4c8bf91b49f"></a><!-- doxytag: member="phoenix::PhVector2d::getDirection" ref="20121f2f137be421b212f4c8bf91b49f" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> phoenix::PhVector2d::getDirection           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Direction. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A unit-length (normalized) vector with the same angle measure as this one. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3d5bac07b16660fc64d6696b5321d02a"></a><!-- doxytag: member="phoenix::PhVector2d::getMagnitude" ref="3d5bac07b16660fc64d6696b5321d02a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float phoenix::PhVector2d::getMagnitude           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Magnitude. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The magnitude (length) of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd>getManitudeSquared(); </dd></dl>

</div>
</div><p>
<a class="anchor" name="723764cc87db234b7ab3312a469d201d"></a><!-- doxytag: member="phoenix::PhVector2d::getMagnitudeSquared" ref="723764cc87db234b7ab3312a469d201d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float phoenix::PhVector2d::getMagnitudeSquared           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Magnitude squared. 
<p>
This is much faster than the above because it does not bother to take the square root. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The squared magnitude (length) of the vector. </dd></dl>
<dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="classphoenix_1_1PhVector2d.htm#3d5bac07b16660fc64d6696b5321d02a" title="Magnitude.">getMagnitude()</a>; </dd></dl>

</div>
</div><p>
<a class="anchor" name="8b1b88ca06bf7ad0e837cc9ae08c4f25"></a><!-- doxytag: member="phoenix::PhVector2d::normalize" ref="8b1b88ca06bf7ad0e837cc9ae08c4f25" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float phoenix::PhVector2d::normalize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Normalization. 
<p>
Normalizes the vector, as in turns it into a unit-length vector. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The length of the vector before normalization. </dd></dl>

</div>
</div><p>
<a class="anchor" name="afe73ebfc9d86f6a2da0218ae398fc31"></a><!-- doxytag: member="phoenix::PhVector2d::operator*" ref="afe73ebfc9d86f6a2da0218ae398fc31" args="(const PhRotationMatrix &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> phoenix::PhVector2d::operator*           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhRotationMatrix.htm">PhRotationMatrix</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix multiplication. 
<p>
Essentially rotates this vector by the matrix. <dl class="note" compact><dt><b>Note:</b></dt><dd>this is technically mathematically illegal. The matrix should be multiplied by the vector. </dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The rotated vector. </dd></dl>

</div>
</div><p>
<a class="anchor" name="cfa5b3c40471fc4f59a17b0aeb378c61"></a><!-- doxytag: member="phoenix::PhVector2d::project" ref="cfa5b3c40471fc4f59a17b0aeb378c61" args="(const PhVector2d &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> phoenix::PhVector2d::project           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Projection. 
<p>
Projects this vector onto vector b. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>Vector to project this vector onto </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The product of projection. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8c6c7a5dedf95e747f90432244d57343"></a><!-- doxytag: member="phoenix::PhVector2d::rotate" ref="8c6c7a5dedf95e747f90432244d57343" args="(const float &amp;angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classphoenix_1_1PhVector2d.htm">PhVector2d</a>&amp; phoenix::PhVector2d::rotate           </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&nbsp;</td>
          <td class="paramname"> <em>angle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate. 
<p>
Rotates the vector the desired amount. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>The measure of the angle in radians. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The rotated vector. Note that this vector itself is also rotated. </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>svn/0.3/libPhoenixGL/<a class="el" href="PhVector2d_8h-source.htm">PhVector2d.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Fri May 8 11:42:33 2009 for PhoenixGL by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.8 </small></address>
</body>
</html>
